name: publish-reports

on:
  workflow_run:
    workflows: ["release"]
    types:
      - completed

permissions:
  actions: read
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [self-hosted, linux, X64, linux_desktop]
    strategy:
      matrix:
        environment_name: [github-pages]
    environment:
      name: ${{ matrix.environment_name }}
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Download storybook artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: storybook-static
          path: storybook
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download release reports artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: release-reports
          path: reports
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare report site
        run: |
          set -euo pipefail
          mkdir -p site
          if [ -f storybook/storybook-static.tar.gz ]; then
            tar -xzf storybook/storybook-static.tar.gz -C site
          else
            echo "storybook-static.tar.gz not found" >&2
            exit 1
          fi
          mkdir -p site/coverage site/lighthouse
          pwd
          ls -lha
          ls -lha reports
          ls -lha reports/lighthouse
          cp -a reports/coverage/lcov-report/. site/coverage/
          cp -a reports/lighthouse/.lighthouseci/. site/lighthouse/
          python - <<'PY'
            import html
            import pathlib

            root = pathlib.Path("site")
            coverage_index = root / "coverage" / "index.html"
            if not coverage_index.exists():
                raise SystemExit("Coverage index.html not found")

            lighthouse_dir = root / "lighthouse"
            html_files = sorted(p.relative_to(lighthouse_dir) for p in lighthouse_dir.rglob("*.html"))

            lighthouse_index = lighthouse_dir / "index.html"
            with lighthouse_index.open("w", encoding="utf-8") as f:
                f.write("<html><head><title>Lighthouse Reports</title></head><body><h1>Lighthouse Reports</h1>\n")
                if html_files:
                    f.write("<ul>\n")
                    for rel in html_files:
                        href = html.escape(str(rel))
                        f.write(f"  <li><a href='{href}'>{href}</a></li>\n")
                    f.write("</ul>\n")
                else:
                    f.write("<p>No Lighthouse HTML reports were found.</p>\n")
                f.write("</body></html>\n")

            index = root / "index.html"
            index.write_text("""<html><head><title>VG Reports</title></head><body><h1>VG Report Portal</h1><ul><li><a href='storybook-static/index.html'>Storybook</a></li><li><a href='coverage/index.html'>Storybook Coverage</a></li><li><a href='lighthouse/index.html'>Lighthouse Reports</a></li></ul></body></html>""", encoding="utf-8")
          PY

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
