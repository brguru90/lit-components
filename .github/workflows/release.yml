name: release

on:
  workflow_dispatch:
    inputs:
      tag_override:
        description: "Optional tag override (defaults to package version)"
        required: false
  push:
    branches:
      - main
    tags:
      - '*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: [self-hosted, linux, X64, linux_desktop]
    env:
      NODE_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build vg library bundle
        run: npm run build-module

      - name: Create npm package tarball
        id: pack
        run: |
          set -euo pipefail
          TARBALL=$(npm pack --json | jq -r '.[0].filename')
          echo "tarball=$TARBALL" >> "$GITHUB_OUTPUT"

      - name: Build documentation and registry
        run: npm run docs:build

      - name: Build Storybook static site
        run: npm run build-storybook

      - name: Run Lighthouse audits
        run: npm run lighthouse

      - name: Set up uv
        uses: astral-sh/setup-uv@v1

      - name: Install Python 3.13 for uv
        run: uv python install 3.13

      - name: Build MCP package
        id: mcp_build
        working-directory: mcp
        env:
          UV_PYTHON: '3.13'
        run: |
          set -euo pipefail
          uv build
          WHEEL=$(python -c 'import pathlib, sys; files = sorted(pathlib.Path("dist").glob("*.whl")); sys.exit("No wheel produced in dist/") if not files else print(files[0].name)')
          echo "wheel=$WHEEL" >> "$GITHUB_OUTPUT"

      - name: Package quality reports
        run: |
          set -euo pipefail
          rm -rf release-reports
          mkdir -p release-reports/coverage release-reports/lighthouse
          if [ -d coverage/storybook/lcov-report ]; then
            cp -a coverage/storybook/lcov-report release-reports/coverage/
          else
            echo "Coverage report not found at coverage/storybook/lcov-report" >&2
            exit 1
          fi
          if [ -d .lighthouseci ]; then
            cp -a .lighthouseci release-reports/lighthouse/
          else
            echo "Lighthouse artifacts missing (.lighthouseci)" >&2
            exit 1
          fi

      - name: Upload quality reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-reports
          path: release-reports
          if-no-files-found: error

      - name: Package Storybook static site
        run: |
          set -euo pipefail
          if [ ! -d storybook-static ]; then
            echo "storybook-static directory not found" >&2
            exit 1
          fi
          tar -czf storybook-static.tar.gz storybook-static

      - name: Upload storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static.tar.gz
          if-no-files-found: error

      - name: Determine release tag
        id: release_tag
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          TAG_OVERRIDE: ${{ github.event.inputs.tag_override }}
        run: |
          set -euo pipefail
          PACKAGE_VERSION=$(node -p 'require("./package.json").version')
          TAG="$PACKAGE_VERSION"
          if [ "$EVENT_NAME" = "workflow_dispatch" ] && [ -n "${TAG_OVERRIDE}" ] && [ "${TAG_OVERRIDE}" != "null" ]; then
            TAG="$TAG_OVERRIDE"
          elif [ "$REF_TYPE" = "tag" ] && [ -n "$REF_NAME" ]; then
            TAG="$REF_NAME"
          fi

          if [ "$TAG" != "$PACKAGE_VERSION" ]; then
            echo "Release tag ($TAG) does not match package.json version ($PACKAGE_VERSION)" >&2
            exit 1
          fi

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ steps.pack.outputs.tarball }}
            mcp/dist/${{ steps.mcp_build.outputs.wheel }}

      - name: Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_tag.outputs.tag }}
          name: Release ${{ steps.release_tag.outputs.tag }}
          artifacts: ${{ steps.pack.outputs.tarball }},mcp/dist/${{ steps.mcp_build.outputs.wheel }}
          allowUpdates: true
          replacesArtifacts: true
