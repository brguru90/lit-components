name: release

on:
  workflow_dispatch:
    inputs:
      tag_override:
        description: "Optional tag override (defaults to package version)"
        required: false
  push:
    branches:
      - main
    tags:
      - '*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: [self-hosted, linux, X64, linux_desktop]
    env:
      NODE_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: npm config
        run: npm config set loglevel verbose
        
      - name: Install dependencies
        run: npm ci --include=dev --loglevel=verbose

      - name: Determine release version
        id: release_info
        env:
          TAG_OVERRIDE: ${{ github.event.inputs.tag_override }}
          EVENT_NAME: ${{ github.event_name }}
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          override="${TAG_OVERRIDE:-}"
          if [ "$override" = "null" ]; then
            override=""
          fi

          if [ -n "$override" ]; then
            tag="$override"
          elif [ "$REF_TYPE" = "tag" ] && [ -n "$REF_NAME" ]; then
            tag="$REF_NAME"
          else
            git fetch --tags --force >/dev/null 2>&1 || true
            last_tag=$(git tag --list '*.*.*' | sort -V | tail -n1 || true)
            prefix=""
            if [ -z "$last_tag" ]; then
              last_tag="0.0.0"
              prefix="v"
            elif [[ "$last_tag" == v* ]]; then
              prefix="v"
            fi

            last_version="${last_tag#v}"
            IFS='.' read -r major minor patch <<< "$last_version"
            major=${major:-0}
            minor=${minor:-0}
            patch=${patch:-0}
            version="$major.$minor.$((patch + 1))"
            tag="${prefix}${version}"

            while git rev-parse -q --verify "refs/tags/$tag" >/dev/null; do
              patch=$((patch + 1))
              version="$major.$minor.$patch"
              tag="${prefix}${version}"
            done
          fi

          version="${tag#v}"
          if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Computed version '$version' is not a valid semantic version (x.y.z)" >&2
            exit 1
          fi

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Run release build scripts
        run: |
          set -euo pipefail
          npm run build-module
          npm run lsp-support
          npm run fix_stuff

      - name: Create npm package tarball
        id: package_tar
        env:
          RELEASE_VERSION: ${{ steps.release_info.outputs.version }}
        run: |
          set -euo pipefail
          rm -f vg-*.tgz
          ORIGINAL=$(npm pack --json | jq -r '.[0].filename')
          DEST="vg-${RELEASE_VERSION}.tgz"
          mv "$ORIGINAL" "$DEST"
          echo "tarball=$DEST" >> "$GITHUB_OUTPUT"

      - name: Update demos with latest tarball
        run: npm run update-demos

      # - name: Install demos dependencies(just to check will it work with framework specific dependencies)
      #   run: npm run install-demos

      - name: Build documentation and registry
        run: npm run docs:build

      - name: Build Storybook static site
        run: npm run build-storybook

      - name: Run Lighthouse audits
        run: npm run lighthouse

      - name: Set up uv
        uses: astral-sh/setup-uv@v1

      - name: Install Python 3.13 for uv
        run: uv python install 3.13

      - name: Build MCP package
        id: mcp_build
        working-directory: mcp
        env:
          UV_PYTHON: '3.13'
        run: |
          set -euo pipefail
          uv build
          WHEEL=$(python -c 'import pathlib, sys; files = sorted(pathlib.Path("dist").glob("*.whl")); sys.exit("No wheel produced in dist/") if not files else print(files[0].name)')
          echo "wheel=$WHEEL" >> "$GITHUB_OUTPUT"

      - name: Package quality reports
        run: |
          set -euo pipefail
          rm -rf release-reports
          mkdir -p release-reports/coverage release-reports/lighthouse
          if [ -d coverage/storybook/lcov-report ]; then
            cp -a coverage/storybook/lcov-report release-reports/coverage/
          else
            echo "Coverage report not found at coverage/storybook/lcov-report" >&2
            exit 1
          fi
          if [ -d .lighthouseci ]; then
            cp -a .lighthouseci release-reports/lighthouse/
          else
            echo "Lighthouse artifacts missing (.lighthouseci)" >&2
            exit 1
          fi

      - name: Upload quality reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-reports
          path: release-reports
          if-no-files-found: error

      - name: Package Storybook static site
        run: |
          set -euo pipefail
          if [ ! -d storybook-static ]; then
            echo "storybook-static directory not found" >&2
            exit 1
          fi
          tar -czf storybook-static.tar.gz storybook-static

      - name: Upload storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static.tar.gz
          if-no-files-found: error

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ steps.package_tar.outputs.tarball }}
            mcp/dist/${{ steps.mcp_build.outputs.wheel }}

      - name: Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_info.outputs.tag }}
          name: Release ${{ steps.release_info.outputs.tag }}
          artifacts: ${{ steps.package_tar.outputs.tarball }},mcp/dist/${{ steps.mcp_build.outputs.wheel }}
          allowUpdates: true
          replacesArtifacts: true
