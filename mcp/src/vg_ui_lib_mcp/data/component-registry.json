{
  "version": "{{-VG_VERSION-}}",
  "framework": "lit",
  "library": "@vg/components",
  "schemas": {
    "ButtonVariant": {
      "values": [
        "primary",
        "secondary",
        "ghost"
      ]
    },
    "ButtonSize": {
      "values": [
        "sm",
        "md",
        "lg"
      ]
    },
    "ButtonNativeType": {
      "values": [
        "button",
        "submit",
        "reset"
      ]
    },
    "ButtonClickDetail": {
      "originalEvent": {
        "type": "PointerEvent",
        "description": "Original pointer event that triggered the handler.",
        "required": true
      }
    },
    "CardVariant": {
      "values": [
        "elevated",
        "outlined",
        "subtle"
      ]
    },
    "CardActionDetail": {
      "originalEvent": {
        "type": "MouseEvent | KeyboardEvent",
        "description": "Original keyboard or pointer event initiating the action.",
        "required": true
      }
    },
    "DropdownOption": {
      "label": {
        "type": "string",
        "description": "Display label shown to the user.",
        "required": true
      },
      "value": {
        "type": "string",
        "description": "Value returned when the option is selected.",
        "required": true
      },
      "description": {
        "type": "string",
        "description": "Optional helper text displayed beneath the option label.",
        "required": false
      },
      "disabled": {
        "type": "boolean",
        "description": "Marks the option as disabled within the dropdown list.",
        "required": false
      }
    },
    "DropdownChangeDetail": {
      "value": {
        "type": "string",
        "description": "Selected option value.",
        "required": true
      },
      "option": {
        "type": "DropdownOption",
        "description": "Full option object corresponding to the selected value, when available.",
        "required": false
      },
      "originalEvent": {
        "type": "Event",
        "description": "Original change event from the native `<select>` element.",
        "required": true
      }
    },
    "InputType": {
      "values": [
        "text",
        "email",
        "password",
        "search",
        "number",
        "tel"
      ]
    },
    "InputChangeDetail": {
      "value": {
        "type": "string",
        "description": "Current value of the input field.",
        "required": true
      },
      "originalEvent": {
        "type": "InputEvent",
        "description": "Native event that triggered the update.",
        "required": true
      }
    },
    "ThemeMode": {
      "values": [
        "dark",
        "light",
        "glass",
        "cartoon"
      ]
    },
    "ThemeChangeDetail": {
      "mode": {
        "type": "ThemeMode",
        "description": "Theme mode that is now active on the provider.",
        "required": true
      },
      "previousMode": {
        "type": "ThemeMode",
        "description": "Theme mode that was active before the change. `null` when no previous theme existed.",
        "required": true
      }
    }
  },
  "components": {
    "vg-input": {
      "lit_component_tag": "vg-input",
      "category": "Input",
      "descriptions": "",
      "component_hierarchy": "",
      "component_type": "",
      "props": {
        "label": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Input label rendered above the control.",
          "default": "null"
        },
        "placeholder": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Placeholder text forwarded to the native input element.",
          "default": "null"
        },
        "type": {
          "type": "InputType",
          "enum": [
            "number",
            "text",
            "email",
            "password",
            "search",
            "tel"
          ],
          "description": "Native input type.",
          "default": "\"text\""
        },
        "helperText": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Provides additional guidance displayed beneath the control.",
          "default": "null"
        },
        "error": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Error message to display. When present the input is marked as invalid.",
          "default": "null"
        },
        "value": {
          "type": "string",
          "description": "Current value of the input. Setting the property updates the native control.",
          "default": "\"\""
        },
        "name": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Name attribute forwarded to the native input.",
          "default": "null"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables user interaction with the input control.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Marks the input as required for form validation.",
          "default": "false"
        },
        "helper-text": {
          "type": "string | null",
          "description": "Provides additional guidance displayed beneath the control.",
          "default": {
            "summary": "null"
          }
        }
      },
      "events": {
        "vg-change": {
          "name": "vg-change",
          "event": "vg-change",
          "parameterType": "InputChangeDetail",
          "description": "Fired whenever the value changes via user input"
        }
      },
      "slots": {
        "prefix": {
          "description": "Optional content rendered before the native input (e.g. icons)"
        },
        "suffix": {
          "description": "Optional content rendered after the native input (e.g. actions)"
        }
      },
      "exposed": {},
      "examples": [
        {
          "id": "components-input--default",
          "name": "Default",
          "sources": {
            "html": "<vg-input\n  label=\"Username\"\n  placeholder=\"Enter your username\"\n  type=\"text\"\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Username\"\n      placeholder=\"Enter your username\"\n      type=\"text\"\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Username\"\n      placeholder=\"Enter your username\"\n      type=\"text\"\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Username\"\n    placeholder=\"Enter your username\"\n    type=\"text\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Username';\n  public placeholder = 'Enter your username';\n  public type = 'text';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Username",
            "placeholder": "Enter your username",
            "type": "text"
          }
        },
        {
          "id": "components-input--disabled",
          "name": "Disabled",
          "sources": {
            "html": "<vg-input\n  label=\"Readonly Field\"\n  placeholder=\"This field is disabled\"\n  type=\"text\"\n  value=\"Cannot edit this\"\n  disabled\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Readonly Field\"\n      placeholder=\"This field is disabled\"\n      type=\"text\"\n      value=\"Cannot edit this\"\n      disabled\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Readonly Field\"\n      placeholder=\"This field is disabled\"\n      type=\"text\"\n      value=\"Cannot edit this\"\n      disabled\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Readonly Field\"\n    placeholder=\"This field is disabled\"\n    type=\"text\"\n    value=\"Cannot edit this\"\n    disabled\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Readonly Field';\n  public placeholder = 'This field is disabled';\n  public type = 'text';\n  public value = 'Cannot edit this';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [value]=\"value\"\n    [disabled]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Readonly Field\"\n        placeholder=\"This field is disabled\"\n        type=\"text\"\n        value=\"Cannot edit this\"\n        ?disabled=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Readonly Field",
            "placeholder": "This field is disabled",
            "type": "text",
            "value": "Cannot edit this",
            "disabled": true
          }
        },
        {
          "id": "components-input--number-input",
          "name": "Number Input",
          "sources": {
            "html": "<vg-input\n  label=\"Age\"\n  placeholder=\"Enter your age\"\n  type=\"number\"\n  helper-text=\"Must be 18 or older\"\n  required\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Age\"\n      placeholder=\"Enter your age\"\n      type=\"number\"\n      helperText=\"Must be 18 or older\"\n      required\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Age\"\n      placeholder=\"Enter your age\"\n      type=\"number\"\n      helperText=\"Must be 18 or older\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Age\"\n    placeholder=\"Enter your age\"\n    type=\"number\"\n    helperText=\"Must be 18 or older\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Age';\n  public placeholder = 'Enter your age';\n  public type = 'number';\n  public helperText = 'Must be 18 or older';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [helperText]=\"helperText\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Age\"\n        placeholder=\"Enter your age\"\n        type=\"number\"\n        helper-text=\"Must be 18 or older\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Age",
            "placeholder": "Enter your age",
            "type": "number",
            "helperText": "Must be 18 or older",
            "required": true
          }
        },
        {
          "id": "components-input--required",
          "name": "Required",
          "sources": {
            "html": "<vg-input\n  label=\"Required Field\"\n  placeholder=\"This field is required\"\n  type=\"text\"\n  required\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Required Field\"\n      placeholder=\"This field is required\"\n      type=\"text\"\n      required\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Required Field\"\n      placeholder=\"This field is required\"\n      type=\"text\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Required Field\"\n    placeholder=\"This field is required\"\n    type=\"text\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Required Field';\n  public placeholder = 'This field is required';\n  public type = 'text';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Required Field\"\n        placeholder=\"This field is required\"\n        type=\"text\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Required Field",
            "placeholder": "This field is required",
            "type": "text",
            "required": true
          }
        },
        {
          "id": "components-input--telephone-input",
          "name": "Telephone Input",
          "sources": {
            "html": "<vg-input\n  label=\"Phone Number\"\n  placeholder=\"+1 (555) 123-4567\"\n  type=\"tel\"\n  helper-text=\"Include country code\"\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Phone Number\"\n      placeholder=\"+1 (555) 123-4567\"\n      type=\"tel\"\n      helperText=\"Include country code\"\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Phone Number\"\n      placeholder=\"+1 (555) 123-4567\"\n      type=\"tel\"\n      helperText=\"Include country code\"\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Phone Number\"\n    placeholder=\"+1 (555) 123-4567\"\n    type=\"tel\"\n    helperText=\"Include country code\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Phone Number';\n  public placeholder = '+1 (555) 123-4567';\n  public type = 'tel';\n  public helperText = 'Include country code';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [helperText]=\"helperText\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Phone Number\"\n        placeholder=\"+1 (555) 123-4567\"\n        type=\"tel\"\n        helper-text=\"Include country code\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Phone Number",
            "placeholder": "+1 (555) 123-4567",
            "type": "tel",
            "helperText": "Include country code"
          }
        },
        {
          "id": "components-input--with-error",
          "name": "With Error",
          "sources": {
            "html": "<vg-input\n  label=\"Email Address\"\n  placeholder=\"Enter your email\"\n  type=\"email\"\n  value=\"invalid-email\"\n  error=\"Please enter a valid email address\"\n  required\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      type=\"email\"\n      value=\"invalid-email\"\n      error=\"Please enter a valid email address\"\n      required\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      type=\"email\"\n      value=\"invalid-email\"\n      error=\"Please enter a valid email address\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Email Address\"\n    placeholder=\"Enter your email\"\n    type=\"email\"\n    value=\"invalid-email\"\n    error=\"Please enter a valid email address\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Email Address';\n  public placeholder = 'Enter your email';\n  public type = 'email';\n  public value = 'invalid-email';\n  public error = 'Please enter a valid email address';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [value]=\"value\"\n    [error]=\"error\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Email Address\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value=\"invalid-email\"\n        error=\"Please enter a valid email address\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Email Address",
            "placeholder": "Enter your email",
            "type": "email",
            "value": "invalid-email",
            "error": "Please enter a valid email address",
            "required": true
          }
        },
        {
          "id": "components-input--with-helper-text",
          "name": "With Helper Text",
          "sources": {
            "html": "<vg-input\n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n  helper-text=\"Password must be at least 8 characters long\"\n  required\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Password\"\n      placeholder=\"Enter your password\"\n      type=\"password\"\n      helperText=\"Password must be at least 8 characters long\"\n      required\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Password\"\n      placeholder=\"Enter your password\"\n      type=\"password\"\n      helperText=\"Password must be at least 8 characters long\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Password\"\n    placeholder=\"Enter your password\"\n    type=\"password\"\n    helperText=\"Password must be at least 8 characters long\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Password';\n  public placeholder = 'Enter your password';\n  public type = 'password';\n  public helperText = 'Password must be at least 8 characters long';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [helperText]=\"helperText\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Password\"\n        placeholder=\"Enter your password\"\n        type=\"password\"\n        helper-text=\"Password must be at least 8 characters long\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Password",
            "placeholder": "Enter your password",
            "type": "password",
            "helperText": "Password must be at least 8 characters long",
            "required": true
          }
        },
        {
          "id": "components-input--with-prefix-icon",
          "name": "With Prefix Icon",
          "sources": {
            "html": "<vg-input\n  label=\"Search\"\n  placeholder=\"Search for items...\"\n  type=\"search\"\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Search\"\n      placeholder=\"Search for items...\"\n      type=\"search\"\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Search\"\n      placeholder=\"Search for items...\"\n      type=\"search\"\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Search\"\n    placeholder=\"Search for items...\"\n    type=\"search\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Search';\n  public placeholder = 'Search for items...';\n  public type = 'search';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Search\"\n        placeholder=\"Search for items...\"\n        type=\"search\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Search",
            "placeholder": "Search for items...",
            "type": "search"
          }
        },
        {
          "id": "components-input--with-suffix-button",
          "name": "With Suffix Button",
          "sources": {
            "html": "<vg-input\n  label=\"Password\"\n  placeholder=\"Enter your password\"\n  type=\"password\"\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Password\"\n      placeholder=\"Enter your password\"\n      type=\"password\"\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Password\"\n      placeholder=\"Enter your password\"\n      type=\"password\"\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Password\"\n    placeholder=\"Enter your password\"\n    type=\"password\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Password';\n  public placeholder = 'Enter your password';\n  public type = 'password';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Password\"\n        placeholder=\"Enter your password\"\n        type=\"password\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Password",
            "placeholder": "Enter your password",
            "type": "password"
          }
        },
        {
          "id": "components-input--with-value",
          "name": "With Value",
          "sources": {
            "html": "<vg-input\n  label=\"Email Address\"\n  placeholder=\"Enter your email\"\n  type=\"email\"\n  value=\"john.doe@example.com\"\n  required\n>\n  \n</vg-input>\n\n<script>\n  const element = document.querySelector('vg-input');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgInput } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgInput\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      type=\"email\"\n      value=\"john.doe@example.com\"\n      required\n    >\n    </VgInput>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-input\n      label=\"Email Address\"\n      placeholder=\"Enter your email\"\n      type=\"email\"\n      value=\"john.doe@example.com\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-input>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-input\n    label=\"Email Address\"\n    placeholder=\"Enter your email\"\n    type=\"email\"\n    value=\"john.doe@example.com\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-input>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Email Address';\n  public placeholder = 'Enter your email';\n  public type = 'email';\n  public value = 'john.doe@example.com';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-input\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [value]=\"value\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-input>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-input\n        label=\"Email Address\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value=\"john.doe@example.com\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-input>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Email Address",
            "placeholder": "Enter your email",
            "type": "email",
            "value": "john.doe@example.com",
            "required": true
          }
        }
      ]
    },
    "vg-button": {
      "lit_component_tag": "vg-button",
      "category": "Button",
      "descriptions": "",
      "component_hierarchy": "",
      "component_type": "",
      "props": {
        "disabled": {
          "type": "boolean",
          "description": "Disables pointer interaction and visually indicates an unavailable state.",
          "default": "false"
        },
        "loading": {
          "type": "boolean",
          "description": "Renders a lightweight loading indicator and prevents interaction while true.",
          "default": "false"
        },
        "variant": {
          "type": "ButtonVariant",
          "enum": [
            "primary",
            "secondary",
            "ghost"
          ],
          "description": "Visual style variant for the button.",
          "default": "\"primary\""
        },
        "size": {
          "type": "ButtonSize",
          "enum": [
            "sm",
            "md",
            "lg"
          ],
          "description": "Controls the paddings and font sizing of the button.",
          "default": "\"md\""
        },
        "buttonType": {
          "type": "ButtonNativeType",
          "enum": [
            "button",
            "submit",
            "reset"
          ],
          "description": "Button type attribute mirroring the native element contract.",
          "default": "\"button\""
        }
      },
      "events": {
        "vg-click": {
          "name": "vg-click",
          "event": "vg-click",
          "parameterType": "ButtonClickDetail",
          "description": "Fired when the button is activated"
        }
      },
      "slots": {
        "prefix": {
          "description": "Optional leading icon or element rendered before the label"
        },
        "default": {
          "description": "Button label content"
        },
        "suffix": {
          "description": "Optional trailing icon or element rendered after the label"
        }
      },
      "exposed": {},
      "examples": [
        {
          "id": "components-button--default",
          "name": "Default",
          "sources": {
            "html": "<vg-button\n>\n  <!--?lit$379713731$-->Click me\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n    >\n    <!--?lit$379713731$-->Click me\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Click me\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Click me\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Click me\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Click me\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {}
        },
        {
          "id": "components-button--disabled",
          "name": "Disabled",
          "sources": {
            "html": "<vg-button\n  disabled\n>\n  <!--?lit$379713731$-->Disabled Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      disabled\n    >\n    <!--?lit$379713731$-->Disabled Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      disabled\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Disabled Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    disabled\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Disabled Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [disabled]=\"true\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Disabled Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        ?disabled=${true}\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Disabled Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "disabled": true
          }
        },
        {
          "id": "components-button--ghost",
          "name": "Ghost",
          "sources": {
            "html": "<vg-button\n  variant=\"ghost\"\n>\n  <!--?lit$379713731$-->Ghost Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      variant=\"ghost\"\n    >\n    <!--?lit$379713731$-->Ghost Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      variant=\"ghost\"\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Ghost Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    variant=\"ghost\"\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Ghost Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'ghost';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [variant]=\"variant\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Ghost Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        variant=\"ghost\"\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Ghost Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "ghost"
          }
        },
        {
          "id": "components-button--large",
          "name": "Large",
          "sources": {
            "html": "<vg-button\n  size=\"lg\"\n>\n  <!--?lit$379713731$-->Large Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      size=\"lg\"\n    >\n    <!--?lit$379713731$-->Large Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      size=\"lg\"\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Large Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    size=\"lg\"\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Large Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public size = 'lg';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [size]=\"size\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Large Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        size=\"lg\"\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Large Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "size": "lg"
          }
        },
        {
          "id": "components-button--loading",
          "name": "Loading",
          "sources": {
            "html": "<vg-button\n  loading\n>\n  <!--?lit$379713731$-->Loading Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      loading\n    >\n    <!--?lit$379713731$-->Loading Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      loading\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Loading Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    loading\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Loading Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [loading]=\"true\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Loading Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        ?loading=${true}\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Loading Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "loading": true
          }
        },
        {
          "id": "components-button--primary",
          "name": "Primary",
          "sources": {
            "html": "<vg-button\n  variant=\"primary\"\n>\n  <!--?lit$379713731$-->Primary Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      variant=\"primary\"\n    >\n    <!--?lit$379713731$-->Primary Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      variant=\"primary\"\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Primary Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    variant=\"primary\"\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Primary Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'primary';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [variant]=\"variant\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Primary Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        variant=\"primary\"\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Primary Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "primary"
          }
        },
        {
          "id": "components-button--secondary",
          "name": "Secondary",
          "sources": {
            "html": "<vg-button\n  variant=\"secondary\"\n>\n  <!--?lit$379713731$-->Secondary Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      variant=\"secondary\"\n    >\n    <!--?lit$379713731$-->Secondary Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      variant=\"secondary\"\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Secondary Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    variant=\"secondary\"\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Secondary Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'secondary';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [variant]=\"variant\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Secondary Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        variant=\"secondary\"\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Secondary Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "secondary"
          }
        },
        {
          "id": "components-button--small",
          "name": "Small",
          "sources": {
            "html": "<vg-button\n  size=\"sm\"\n>\n  <!--?lit$379713731$-->Small Button\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      size=\"sm\"\n    >\n    <!--?lit$379713731$-->Small Button\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      size=\"sm\"\n      onvg-click={handleEvent}\n    >\n    {\"<!--?lit$379713731$-->Small Button\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    size=\"sm\"\n    @vg-click=\"handleEvent\"\n  >\n    <!--?lit$379713731$-->Small Button\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public size = 'sm';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [size]=\"size\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <!--?lit$379713731$-->Small Button\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        size=\"sm\"\n        @vg-click=${this.handleEvent}\n      >\n        <!--?lit$379713731$-->Small Button\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "size": "sm"
          }
        },
        {
          "id": "components-button--with-prefix-icon",
          "name": "With Prefix Icon",
          "sources": {
            "html": "<vg-button\n>\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n  <!--?lit$379713731$-->\n    \n    Button with Icon\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n    >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n    <!--?lit$379713731$-->\n    \n    Button with Icon\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      onvg-click={handleEvent}\n    >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n    {\"<!--?lit$379713731$-->\\n    \\n    Button with Icon\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    @vg-click=\"handleEvent\"\n  >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n    <!--?lit$379713731$-->\n    \n    Button with Icon\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    (vg-click)=\"onEvent($event)\"\n>\n  <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n  <!--?lit$379713731$-->\n    \n    Button with Icon\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        @vg-click=${this.handleEvent}\n      >\n        <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\n    </svg>\n        <!--?lit$379713731$-->\n    \n    Button with Icon\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {}
        },
        {
          "id": "components-button--with-suffix-icon",
          "name": "With Suffix Icon",
          "sources": {
            "html": "<vg-button\n  variant=\"secondary\"\n>\n    <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n  <!--?lit$379713731$-->\n    Button with Icon\n</vg-button>\n\n<script>\n  const element = document.querySelector('vg-button');\n  \n  // Event listeners\n  element.addEventListener('vg-click', (event) => {\n    console.log('vg-click', event.detail);\n  });\n</script>",
            "react": "import { VgButton } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <VgButton\n      variant=\"secondary\"\n    >\n    <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n    <!--?lit$379713731$-->\n    Button with Icon\n    </VgButton>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-click', event.detail);\n  };\n\n  return (\n    <vg-button\n      variant=\"secondary\"\n      onvg-click={handleEvent}\n    >\n    <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n    {\"<!--?lit$379713731$-->\\n    Button with Icon\"}\n    </vg-button>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-button\n    variant=\"secondary\"\n    @vg-click=\"handleEvent\"\n  >\n    <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n    <!--?lit$379713731$-->\n    Button with Icon\n  </vg-button>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'secondary';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-button\n    [variant]=\"variant\"\n    (vg-click)=\"onEvent($event)\"\n>\n  <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n  <!--?lit$379713731$-->\n    Button with Icon\n</vg-button>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-button\n        variant=\"secondary\"\n        @vg-click=${this.handleEvent}\n      >\n        <svg slot=\"suffix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12l-4.58 4.59z\"></path>\n    </svg>\n        <!--?lit$379713731$-->\n    Button with Icon\n      </vg-button>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "secondary"
          }
        }
      ]
    },
    "vg-dropdown": {
      "lit_component_tag": "vg-dropdown",
      "category": "Dropdown",
      "descriptions": "",
      "component_hierarchy": "",
      "component_type": "",
      "props": {
        "label": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Label displayed above the dropdown control.",
          "default": "null"
        },
        "placeholder": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Placeholder rendered as the first option when no value is selected.",
          "default": "null"
        },
        "options": {
          "type": "DropdownOption[]",
          "description": "Collection of options rendered by the dropdown.",
          "default": {
            "summary": "[]"
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables the dropdown and prevents user interaction.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Marks the dropdown as required when used in forms.",
          "default": "false"
        },
        "value": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Currently selected value.",
          "default": "null"
        },
        "helperText": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Optional text rendered below the control for guidance.",
          "default": "null"
        },
        "error": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Error message displayed below the control; marks the dropdown as invalid.",
          "default": "null"
        },
        "name": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Name attribute forwarded to the native select element.",
          "default": "null"
        },
        "helper-text": {
          "type": "string | null",
          "description": "Optional text rendered below the control for guidance.",
          "default": {
            "summary": "null"
          }
        }
      },
      "events": {
        "vg-change": {
          "name": "vg-change",
          "event": "vg-change",
          "parameterType": "DropdownChangeDetail",
          "description": "Emitted when the selected option changes"
        }
      },
      "slots": {
        "prefix": {
          "description": "Optional slot rendered before the native select"
        },
        "suffix": {
          "description": "Optional slot rendered after the native select (for badges, icons, etc.)"
        }
      },
      "exposed": {},
      "examples": [
        {
          "id": "components-dropdown--default",
          "name": "Default",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Select an Option\"\n  placeholder=\"Choose one...\"\n  options=\"[{'label':'Option 1','value':'option1','description':'First option'},{'label':'Option 2','value':'option2','description':'Second option'},{'label':'Option 3','value':'option3','description':'Third option'},{'label':'Disabled Option','value':'disabled','description':'This option is disabled','disabled':true}]\"\n  value=\"\"\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Select an Option\"\n      placeholder=\"Choose one...\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      value=\"\"\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Select an Option\"\n      placeholder=\"Choose one...\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      value=\"\"\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Select an Option\"\n    placeholder=\"Choose one...\"\n    :options=\"options\"\n    value=\"\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Select an Option';\n  public placeholder = 'Choose one...';\n  public options = [{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}];\n  public value = '';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [value]=\"value\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Select an Option\"\n        placeholder=\"Choose one...\"\n        .options=${[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n        value=\"\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Select an Option",
            "placeholder": "Choose one...",
            "options": [
              {
                "label": "Option 1",
                "value": "option1",
                "description": "First option"
              },
              {
                "label": "Option 2",
                "value": "option2",
                "description": "Second option"
              },
              {
                "label": "Option 3",
                "value": "option3",
                "description": "Third option"
              },
              {
                "label": "Disabled Option",
                "value": "disabled",
                "description": "This option is disabled",
                "disabled": true
              }
            ],
            "disabled": false,
            "required": false,
            "value": ""
          }
        },
        {
          "id": "components-dropdown--disabled",
          "name": "Disabled",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Disabled Dropdown\"\n  placeholder=\"Cannot select\"\n  options=\"[{'label':'Option 1','value':'option1','description':'First option'},{'label':'Option 2','value':'option2','description':'Second option'},{'label':'Option 3','value':'option3','description':'Third option'},{'label':'Disabled Option','value':'disabled','description':'This option is disabled','disabled':true}]\"\n  value=\"option2\"\n  helper-text=\"This field is currently disabled\"\n  disabled\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Disabled Dropdown\"\n      placeholder=\"Cannot select\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      value=\"option2\"\n      helperText=\"This field is currently disabled\"\n      disabled\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Disabled Dropdown\"\n      placeholder=\"Cannot select\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      value=\"option2\"\n      helperText=\"This field is currently disabled\"\n      disabled\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Disabled Dropdown\"\n    placeholder=\"Cannot select\"\n    :options=\"options\"\n    value=\"option2\"\n    helperText=\"This field is currently disabled\"\n    disabled\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Disabled Dropdown';\n  public placeholder = 'Cannot select';\n  public options = [{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}];\n  public value = 'option2';\n  public helperText = 'This field is currently disabled';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [value]=\"value\"\n    [helperText]=\"helperText\"\n    [disabled]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Disabled Dropdown\"\n        placeholder=\"Cannot select\"\n        .options=${[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n        value=\"option2\"\n        helper-text=\"This field is currently disabled\"\n        ?disabled=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Disabled Dropdown",
            "placeholder": "Cannot select",
            "options": [
              {
                "label": "Option 1",
                "value": "option1",
                "description": "First option"
              },
              {
                "label": "Option 2",
                "value": "option2",
                "description": "Second option"
              },
              {
                "label": "Option 3",
                "value": "option3",
                "description": "Third option"
              },
              {
                "label": "Disabled Option",
                "value": "disabled",
                "description": "This option is disabled",
                "disabled": true
              }
            ],
            "value": "option2",
            "helperText": "This field is currently disabled",
            "disabled": true,
            "required": false
          }
        },
        {
          "id": "components-dropdown--long-options-list",
          "name": "Long Options List",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Country\"\n  placeholder=\"Select your country\"\n  options=\"[{'label':'Afghanistan','value':'af'},{'label':'Albania','value':'al'},{'label':'Algeria','value':'dz'},{'label':'Argentina','value':'ar'},{'label':'Australia','value':'au'},{'label':'Austria','value':'at'},{'label':'Bangladesh','value':'bd'},{'label':'Belgium','value':'be'},{'label':'Brazil','value':'br'},{'label':'Canada','value':'ca'},{'label':'China','value':'cn'},{'label':'Denmark','value':'dk'},{'label':'Egypt','value':'eg'},{'label':'France','value':'fr'},{'label':'Germany','value':'de'},{'label':'India','value':'in'},{'label':'Italy','value':'it'},{'label':'Japan','value':'jp'},{'label':'Mexico','value':'mx'},{'label':'Netherlands','value':'nl'},{'label':'Norway','value':'no'},{'label':'Russia','value':'ru'},{'label':'South Africa','value':'za'},{'label':'Spain','value':'es'},{'label':'Sweden','value':'se'},{'label':'Switzerland','value':'ch'},{'label':'United Kingdom','value':'uk'},{'label':'United States','value':'us'}]\"\n  helper-text=\"Scroll to see more options\"\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Country\"\n      placeholder=\"Select your country\"\n      options={[{\"label\":\"Afghanistan\",\"value\":\"af\"},{\"label\":\"Albania\",\"value\":\"al\"},{\"label\":\"Algeria\",\"value\":\"dz\"},{\"label\":\"Argentina\",\"value\":\"ar\"},{\"label\":\"Australia\",\"value\":\"au\"},{\"label\":\"Austria\",\"value\":\"at\"},{\"label\":\"Bangladesh\",\"value\":\"bd\"},{\"label\":\"Belgium\",\"value\":\"be\"},{\"label\":\"Brazil\",\"value\":\"br\"},{\"label\":\"Canada\",\"value\":\"ca\"},{\"label\":\"China\",\"value\":\"cn\"},{\"label\":\"Denmark\",\"value\":\"dk\"},{\"label\":\"Egypt\",\"value\":\"eg\"},{\"label\":\"France\",\"value\":\"fr\"},{\"label\":\"Germany\",\"value\":\"de\"},{\"label\":\"India\",\"value\":\"in\"},{\"label\":\"Italy\",\"value\":\"it\"},{\"label\":\"Japan\",\"value\":\"jp\"},{\"label\":\"Mexico\",\"value\":\"mx\"},{\"label\":\"Netherlands\",\"value\":\"nl\"},{\"label\":\"Norway\",\"value\":\"no\"},{\"label\":\"Russia\",\"value\":\"ru\"},{\"label\":\"South Africa\",\"value\":\"za\"},{\"label\":\"Spain\",\"value\":\"es\"},{\"label\":\"Sweden\",\"value\":\"se\"},{\"label\":\"Switzerland\",\"value\":\"ch\"},{\"label\":\"United Kingdom\",\"value\":\"uk\"},{\"label\":\"United States\",\"value\":\"us\"}]}\n      helperText=\"Scroll to see more options\"\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Country\"\n      placeholder=\"Select your country\"\n      options={[{\"label\":\"Afghanistan\",\"value\":\"af\"},{\"label\":\"Albania\",\"value\":\"al\"},{\"label\":\"Algeria\",\"value\":\"dz\"},{\"label\":\"Argentina\",\"value\":\"ar\"},{\"label\":\"Australia\",\"value\":\"au\"},{\"label\":\"Austria\",\"value\":\"at\"},{\"label\":\"Bangladesh\",\"value\":\"bd\"},{\"label\":\"Belgium\",\"value\":\"be\"},{\"label\":\"Brazil\",\"value\":\"br\"},{\"label\":\"Canada\",\"value\":\"ca\"},{\"label\":\"China\",\"value\":\"cn\"},{\"label\":\"Denmark\",\"value\":\"dk\"},{\"label\":\"Egypt\",\"value\":\"eg\"},{\"label\":\"France\",\"value\":\"fr\"},{\"label\":\"Germany\",\"value\":\"de\"},{\"label\":\"India\",\"value\":\"in\"},{\"label\":\"Italy\",\"value\":\"it\"},{\"label\":\"Japan\",\"value\":\"jp\"},{\"label\":\"Mexico\",\"value\":\"mx\"},{\"label\":\"Netherlands\",\"value\":\"nl\"},{\"label\":\"Norway\",\"value\":\"no\"},{\"label\":\"Russia\",\"value\":\"ru\"},{\"label\":\"South Africa\",\"value\":\"za\"},{\"label\":\"Spain\",\"value\":\"es\"},{\"label\":\"Sweden\",\"value\":\"se\"},{\"label\":\"Switzerland\",\"value\":\"ch\"},{\"label\":\"United Kingdom\",\"value\":\"uk\"},{\"label\":\"United States\",\"value\":\"us\"}]}\n      helperText=\"Scroll to see more options\"\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Afghanistan\",\"value\":\"af\"},{\"label\":\"Albania\",\"value\":\"al\"},{\"label\":\"Algeria\",\"value\":\"dz\"},{\"label\":\"Argentina\",\"value\":\"ar\"},{\"label\":\"Australia\",\"value\":\"au\"},{\"label\":\"Austria\",\"value\":\"at\"},{\"label\":\"Bangladesh\",\"value\":\"bd\"},{\"label\":\"Belgium\",\"value\":\"be\"},{\"label\":\"Brazil\",\"value\":\"br\"},{\"label\":\"Canada\",\"value\":\"ca\"},{\"label\":\"China\",\"value\":\"cn\"},{\"label\":\"Denmark\",\"value\":\"dk\"},{\"label\":\"Egypt\",\"value\":\"eg\"},{\"label\":\"France\",\"value\":\"fr\"},{\"label\":\"Germany\",\"value\":\"de\"},{\"label\":\"India\",\"value\":\"in\"},{\"label\":\"Italy\",\"value\":\"it\"},{\"label\":\"Japan\",\"value\":\"jp\"},{\"label\":\"Mexico\",\"value\":\"mx\"},{\"label\":\"Netherlands\",\"value\":\"nl\"},{\"label\":\"Norway\",\"value\":\"no\"},{\"label\":\"Russia\",\"value\":\"ru\"},{\"label\":\"South Africa\",\"value\":\"za\"},{\"label\":\"Spain\",\"value\":\"es\"},{\"label\":\"Sweden\",\"value\":\"se\"},{\"label\":\"Switzerland\",\"value\":\"ch\"},{\"label\":\"United Kingdom\",\"value\":\"uk\"},{\"label\":\"United States\",\"value\":\"us\"}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Country\"\n    placeholder=\"Select your country\"\n    :options=\"options\"\n    helperText=\"Scroll to see more options\"\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Country';\n  public placeholder = 'Select your country';\n  public options = [{\"label\":\"Afghanistan\",\"value\":\"af\"},{\"label\":\"Albania\",\"value\":\"al\"},{\"label\":\"Algeria\",\"value\":\"dz\"},{\"label\":\"Argentina\",\"value\":\"ar\"},{\"label\":\"Australia\",\"value\":\"au\"},{\"label\":\"Austria\",\"value\":\"at\"},{\"label\":\"Bangladesh\",\"value\":\"bd\"},{\"label\":\"Belgium\",\"value\":\"be\"},{\"label\":\"Brazil\",\"value\":\"br\"},{\"label\":\"Canada\",\"value\":\"ca\"},{\"label\":\"China\",\"value\":\"cn\"},{\"label\":\"Denmark\",\"value\":\"dk\"},{\"label\":\"Egypt\",\"value\":\"eg\"},{\"label\":\"France\",\"value\":\"fr\"},{\"label\":\"Germany\",\"value\":\"de\"},{\"label\":\"India\",\"value\":\"in\"},{\"label\":\"Italy\",\"value\":\"it\"},{\"label\":\"Japan\",\"value\":\"jp\"},{\"label\":\"Mexico\",\"value\":\"mx\"},{\"label\":\"Netherlands\",\"value\":\"nl\"},{\"label\":\"Norway\",\"value\":\"no\"},{\"label\":\"Russia\",\"value\":\"ru\"},{\"label\":\"South Africa\",\"value\":\"za\"},{\"label\":\"Spain\",\"value\":\"es\"},{\"label\":\"Sweden\",\"value\":\"se\"},{\"label\":\"Switzerland\",\"value\":\"ch\"},{\"label\":\"United Kingdom\",\"value\":\"uk\"},{\"label\":\"United States\",\"value\":\"us\"}];\n  public helperText = 'Scroll to see more options';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [helperText]=\"helperText\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Country\"\n        placeholder=\"Select your country\"\n        .options=${[{\"label\":\"Afghanistan\",\"value\":\"af\"},{\"label\":\"Albania\",\"value\":\"al\"},{\"label\":\"Algeria\",\"value\":\"dz\"},{\"label\":\"Argentina\",\"value\":\"ar\"},{\"label\":\"Australia\",\"value\":\"au\"},{\"label\":\"Austria\",\"value\":\"at\"},{\"label\":\"Bangladesh\",\"value\":\"bd\"},{\"label\":\"Belgium\",\"value\":\"be\"},{\"label\":\"Brazil\",\"value\":\"br\"},{\"label\":\"Canada\",\"value\":\"ca\"},{\"label\":\"China\",\"value\":\"cn\"},{\"label\":\"Denmark\",\"value\":\"dk\"},{\"label\":\"Egypt\",\"value\":\"eg\"},{\"label\":\"France\",\"value\":\"fr\"},{\"label\":\"Germany\",\"value\":\"de\"},{\"label\":\"India\",\"value\":\"in\"},{\"label\":\"Italy\",\"value\":\"it\"},{\"label\":\"Japan\",\"value\":\"jp\"},{\"label\":\"Mexico\",\"value\":\"mx\"},{\"label\":\"Netherlands\",\"value\":\"nl\"},{\"label\":\"Norway\",\"value\":\"no\"},{\"label\":\"Russia\",\"value\":\"ru\"},{\"label\":\"South Africa\",\"value\":\"za\"},{\"label\":\"Spain\",\"value\":\"es\"},{\"label\":\"Sweden\",\"value\":\"se\"},{\"label\":\"Switzerland\",\"value\":\"ch\"},{\"label\":\"United Kingdom\",\"value\":\"uk\"},{\"label\":\"United States\",\"value\":\"us\"}]}\n        helper-text=\"Scroll to see more options\"\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Country",
            "placeholder": "Select your country",
            "options": [
              {
                "label": "Afghanistan",
                "value": "af"
              },
              {
                "label": "Albania",
                "value": "al"
              },
              {
                "label": "Algeria",
                "value": "dz"
              },
              {
                "label": "Argentina",
                "value": "ar"
              },
              {
                "label": "Australia",
                "value": "au"
              },
              {
                "label": "Austria",
                "value": "at"
              },
              {
                "label": "Bangladesh",
                "value": "bd"
              },
              {
                "label": "Belgium",
                "value": "be"
              },
              {
                "label": "Brazil",
                "value": "br"
              },
              {
                "label": "Canada",
                "value": "ca"
              },
              {
                "label": "China",
                "value": "cn"
              },
              {
                "label": "Denmark",
                "value": "dk"
              },
              {
                "label": "Egypt",
                "value": "eg"
              },
              {
                "label": "France",
                "value": "fr"
              },
              {
                "label": "Germany",
                "value": "de"
              },
              {
                "label": "India",
                "value": "in"
              },
              {
                "label": "Italy",
                "value": "it"
              },
              {
                "label": "Japan",
                "value": "jp"
              },
              {
                "label": "Mexico",
                "value": "mx"
              },
              {
                "label": "Netherlands",
                "value": "nl"
              },
              {
                "label": "Norway",
                "value": "no"
              },
              {
                "label": "Russia",
                "value": "ru"
              },
              {
                "label": "South Africa",
                "value": "za"
              },
              {
                "label": "Spain",
                "value": "es"
              },
              {
                "label": "Sweden",
                "value": "se"
              },
              {
                "label": "Switzerland",
                "value": "ch"
              },
              {
                "label": "United Kingdom",
                "value": "uk"
              },
              {
                "label": "United States",
                "value": "us"
              }
            ],
            "helperText": "Scroll to see more options",
            "disabled": false,
            "required": false
          }
        },
        {
          "id": "components-dropdown--with-error",
          "name": "With Error",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Required Field\"\n  placeholder=\"You must select an option\"\n  options=\"[{'label':'Option 1','value':'option1','description':'First option'},{'label':'Option 2','value':'option2','description':'Second option'},{'label':'Option 3','value':'option3','description':'Third option'},{'label':'Disabled Option','value':'disabled','description':'This option is disabled','disabled':true}]\"\n  error=\"This field is required\"\n  required\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Required Field\"\n      placeholder=\"You must select an option\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      error=\"This field is required\"\n      required\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Required Field\"\n      placeholder=\"You must select an option\"\n      options={[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n      error=\"This field is required\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Required Field\"\n    placeholder=\"You must select an option\"\n    :options=\"options\"\n    error=\"This field is required\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Required Field';\n  public placeholder = 'You must select an option';\n  public options = [{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}];\n  public error = 'This field is required';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [error]=\"error\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Required Field\"\n        placeholder=\"You must select an option\"\n        .options=${[{\"label\":\"Option 1\",\"value\":\"option1\",\"description\":\"First option\"},{\"label\":\"Option 2\",\"value\":\"option2\",\"description\":\"Second option\"},{\"label\":\"Option 3\",\"value\":\"option3\",\"description\":\"Third option\"},{\"label\":\"Disabled Option\",\"value\":\"disabled\",\"description\":\"This option is disabled\",\"disabled\":true}]}\n        error=\"This field is required\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Required Field",
            "placeholder": "You must select an option",
            "options": [
              {
                "label": "Option 1",
                "value": "option1",
                "description": "First option"
              },
              {
                "label": "Option 2",
                "value": "option2",
                "description": "Second option"
              },
              {
                "label": "Option 3",
                "value": "option3",
                "description": "Third option"
              },
              {
                "label": "Disabled Option",
                "value": "disabled",
                "description": "This option is disabled",
                "disabled": true
              }
            ],
            "error": "This field is required",
            "disabled": false,
            "required": true
          }
        },
        {
          "id": "components-dropdown--with-helper-text",
          "name": "With Helper Text",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Priority Level\"\n  placeholder=\"Select priority\"\n  options=\"[{'label':'Low','value':'low','description':'Non-urgent items'},{'label':'Medium','value':'medium','description':'Standard priority'},{'label':'High','value':'high','description':'Important items'},{'label':'Critical','value':'critical','description':'Urgent attention required'}]\"\n  helper-text=\"Choose the appropriate priority level for your request\"\n  required\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Priority Level\"\n      placeholder=\"Select priority\"\n      options={[{\"label\":\"Low\",\"value\":\"low\",\"description\":\"Non-urgent items\"},{\"label\":\"Medium\",\"value\":\"medium\",\"description\":\"Standard priority\"},{\"label\":\"High\",\"value\":\"high\",\"description\":\"Important items\"},{\"label\":\"Critical\",\"value\":\"critical\",\"description\":\"Urgent attention required\"}]}\n      helperText=\"Choose the appropriate priority level for your request\"\n      required\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Priority Level\"\n      placeholder=\"Select priority\"\n      options={[{\"label\":\"Low\",\"value\":\"low\",\"description\":\"Non-urgent items\"},{\"label\":\"Medium\",\"value\":\"medium\",\"description\":\"Standard priority\"},{\"label\":\"High\",\"value\":\"high\",\"description\":\"Important items\"},{\"label\":\"Critical\",\"value\":\"critical\",\"description\":\"Urgent attention required\"}]}\n      helperText=\"Choose the appropriate priority level for your request\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Low\",\"value\":\"low\",\"description\":\"Non-urgent items\"},{\"label\":\"Medium\",\"value\":\"medium\",\"description\":\"Standard priority\"},{\"label\":\"High\",\"value\":\"high\",\"description\":\"Important items\"},{\"label\":\"Critical\",\"value\":\"critical\",\"description\":\"Urgent attention required\"}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Priority Level\"\n    placeholder=\"Select priority\"\n    :options=\"options\"\n    helperText=\"Choose the appropriate priority level for your request\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Priority Level';\n  public placeholder = 'Select priority';\n  public options = [{\"label\":\"Low\",\"value\":\"low\",\"description\":\"Non-urgent items\"},{\"label\":\"Medium\",\"value\":\"medium\",\"description\":\"Standard priority\"},{\"label\":\"High\",\"value\":\"high\",\"description\":\"Important items\"},{\"label\":\"Critical\",\"value\":\"critical\",\"description\":\"Urgent attention required\"}];\n  public helperText = 'Choose the appropriate priority level for your request';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [helperText]=\"helperText\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Priority Level\"\n        placeholder=\"Select priority\"\n        .options=${[{\"label\":\"Low\",\"value\":\"low\",\"description\":\"Non-urgent items\"},{\"label\":\"Medium\",\"value\":\"medium\",\"description\":\"Standard priority\"},{\"label\":\"High\",\"value\":\"high\",\"description\":\"Important items\"},{\"label\":\"Critical\",\"value\":\"critical\",\"description\":\"Urgent attention required\"}]}\n        helper-text=\"Choose the appropriate priority level for your request\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Priority Level",
            "placeholder": "Select priority",
            "options": [
              {
                "label": "Low",
                "value": "low",
                "description": "Non-urgent items"
              },
              {
                "label": "Medium",
                "value": "medium",
                "description": "Standard priority"
              },
              {
                "label": "High",
                "value": "high",
                "description": "Important items"
              },
              {
                "label": "Critical",
                "value": "critical",
                "description": "Urgent attention required"
              }
            ],
            "helperText": "Choose the appropriate priority level for your request",
            "disabled": false,
            "required": true
          }
        },
        {
          "id": "components-dropdown--with-prefix-icon",
          "name": "With Prefix Icon",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Location\"\n  placeholder=\"Select location\"\n  options=\"[{'label':'New York','value':'ny','description':'Eastern Time Zone'},{'label':'Los Angeles','value':'la','description':'Pacific Time Zone'},{'label':'Chicago','value':'chi','description':'Central Time Zone'},{'label':'Denver','value':'den','description':'Mountain Time Zone'}]\"\n>\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Location\"\n      placeholder=\"Select location\"\n      options={[{\"label\":\"New York\",\"value\":\"ny\",\"description\":\"Eastern Time Zone\"},{\"label\":\"Los Angeles\",\"value\":\"la\",\"description\":\"Pacific Time Zone\"},{\"label\":\"Chicago\",\"value\":\"chi\",\"description\":\"Central Time Zone\"},{\"label\":\"Denver\",\"value\":\"den\",\"description\":\"Mountain Time Zone\"}]}\n    >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Location\"\n      placeholder=\"Select location\"\n      options={[{\"label\":\"New York\",\"value\":\"ny\",\"description\":\"Eastern Time Zone\"},{\"label\":\"Los Angeles\",\"value\":\"la\",\"description\":\"Pacific Time Zone\"},{\"label\":\"Chicago\",\"value\":\"chi\",\"description\":\"Central Time Zone\"},{\"label\":\"Denver\",\"value\":\"den\",\"description\":\"Mountain Time Zone\"}]}\n      onvg-change={handleEvent}\n    >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"New York\",\"value\":\"ny\",\"description\":\"Eastern Time Zone\"},{\"label\":\"Los Angeles\",\"value\":\"la\",\"description\":\"Pacific Time Zone\"},{\"label\":\"Chicago\",\"value\":\"chi\",\"description\":\"Central Time Zone\"},{\"label\":\"Denver\",\"value\":\"den\",\"description\":\"Mountain Time Zone\"}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Location\"\n    placeholder=\"Select location\"\n    :options=\"options\"\n    @vg-change=\"handleEvent\"\n  >\n    <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Location';\n  public placeholder = 'Select location';\n  public options = [{\"label\":\"New York\",\"value\":\"ny\",\"description\":\"Eastern Time Zone\"},{\"label\":\"Los Angeles\",\"value\":\"la\",\"description\":\"Pacific Time Zone\"},{\"label\":\"Chicago\",\"value\":\"chi\",\"description\":\"Central Time Zone\"},{\"label\":\"Denver\",\"value\":\"den\",\"description\":\"Mountain Time Zone\"}];\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Location\"\n        placeholder=\"Select location\"\n        .options=${[{\"label\":\"New York\",\"value\":\"ny\",\"description\":\"Eastern Time Zone\"},{\"label\":\"Los Angeles\",\"value\":\"la\",\"description\":\"Pacific Time Zone\"},{\"label\":\"Chicago\",\"value\":\"chi\",\"description\":\"Central Time Zone\"},{\"label\":\"Denver\",\"value\":\"den\",\"description\":\"Mountain Time Zone\"}]}\n        @vg-change=${this.handleEvent}\n      >\n        <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"margin-left: 12px;\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"></path>\n        </svg>\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Location",
            "placeholder": "Select location",
            "options": [
              {
                "label": "New York",
                "value": "ny",
                "description": "Eastern Time Zone"
              },
              {
                "label": "Los Angeles",
                "value": "la",
                "description": "Pacific Time Zone"
              },
              {
                "label": "Chicago",
                "value": "chi",
                "description": "Central Time Zone"
              },
              {
                "label": "Denver",
                "value": "den",
                "description": "Mountain Time Zone"
              }
            ]
          }
        },
        {
          "id": "components-dropdown--with-suffix-badge",
          "name": "With Suffix Badge",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Plan Type\"\n  placeholder=\"Select your plan\"\n  value=\"pro\"\n  options=\"[{'label':'Basic','value':'basic','description':'$10/month - Essential features'},{'label':'Pro','value':'pro','description':'$25/month - Advanced features'},{'label':'Enterprise','value':'enterprise','description':'$50/month - All features'}]\"\n>\n    <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Plan Type\"\n      placeholder=\"Select your plan\"\n      value=\"pro\"\n      options={[{\"label\":\"Basic\",\"value\":\"basic\",\"description\":\"$10/month - Essential features\"},{\"label\":\"Pro\",\"value\":\"pro\",\"description\":\"$25/month - Advanced features\"},{\"label\":\"Enterprise\",\"value\":\"enterprise\",\"description\":\"$50/month - All features\"}]}\n    >\n    <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Plan Type\"\n      placeholder=\"Select your plan\"\n      value=\"pro\"\n      options={[{\"label\":\"Basic\",\"value\":\"basic\",\"description\":\"$10/month - Essential features\"},{\"label\":\"Pro\",\"value\":\"pro\",\"description\":\"$25/month - Advanced features\"},{\"label\":\"Enterprise\",\"value\":\"enterprise\",\"description\":\"$50/month - All features\"}]}\n      onvg-change={handleEvent}\n    >\n    <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"Basic\",\"value\":\"basic\",\"description\":\"$10/month - Essential features\"},{\"label\":\"Pro\",\"value\":\"pro\",\"description\":\"$25/month - Advanced features\"},{\"label\":\"Enterprise\",\"value\":\"enterprise\",\"description\":\"$50/month - All features\"}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Plan Type\"\n    placeholder=\"Select your plan\"\n    value=\"pro\"\n    :options=\"options\"\n    @vg-change=\"handleEvent\"\n  >\n    <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Plan Type';\n  public placeholder = 'Select your plan';\n  public value = 'pro';\n  public options = [{\"label\":\"Basic\",\"value\":\"basic\",\"description\":\"$10/month - Essential features\"},{\"label\":\"Pro\",\"value\":\"pro\",\"description\":\"$25/month - Advanced features\"},{\"label\":\"Enterprise\",\"value\":\"enterprise\",\"description\":\"$50/month - All features\"}];\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [value]=\"value\"\n    [options]=\"options\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Plan Type\"\n        placeholder=\"Select your plan\"\n        value=\"pro\"\n        .options=${[{\"label\":\"Basic\",\"value\":\"basic\",\"description\":\"$10/month - Essential features\"},{\"label\":\"Pro\",\"value\":\"pro\",\"description\":\"$25/month - Advanced features\"},{\"label\":\"Enterprise\",\"value\":\"enterprise\",\"description\":\"$50/month - All features\"}]}\n        @vg-change=${this.handleEvent}\n      >\n        <span slot=\"suffix\" style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-right: 8px;\">Popular</span>\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Plan Type",
            "placeholder": "Select your plan",
            "value": "pro",
            "options": [
              {
                "label": "Basic",
                "value": "basic",
                "description": "$10/month - Essential features"
              },
              {
                "label": "Pro",
                "value": "pro",
                "description": "$25/month - Advanced features"
              },
              {
                "label": "Enterprise",
                "value": "enterprise",
                "description": "$50/month - All features"
              }
            ]
          }
        },
        {
          "id": "components-dropdown--with-value",
          "name": "With Value",
          "sources": {
            "html": "<vg-dropdown\n  label=\"Country\"\n  placeholder=\"Select your country\"\n  options=\"[{'label':'United States','value':'us','description':'North America'},{'label':'United Kingdom','value':'uk','description':'Europe'},{'label':'Canada','value':'ca','description':'North America'},{'label':'Australia','value':'au','description':'Oceania'},{'label':'Germany','value':'de','description':'Europe'},{'label':'Japan','value':'jp','description':'Asia'},{'label':'Brazil','value':'br','description':'South America'}]\"\n  value=\"us\"\n  helper-text=\"This affects your shipping options\"\n  required\n>\n  \n</vg-dropdown>\n\n<script>\n  const element = document.querySelector('vg-dropdown');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgDropdown } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgDropdown\n      label=\"Country\"\n      placeholder=\"Select your country\"\n      options={[{\"label\":\"United States\",\"value\":\"us\",\"description\":\"North America\"},{\"label\":\"United Kingdom\",\"value\":\"uk\",\"description\":\"Europe\"},{\"label\":\"Canada\",\"value\":\"ca\",\"description\":\"North America\"},{\"label\":\"Australia\",\"value\":\"au\",\"description\":\"Oceania\"},{\"label\":\"Germany\",\"value\":\"de\",\"description\":\"Europe\"},{\"label\":\"Japan\",\"value\":\"jp\",\"description\":\"Asia\"},{\"label\":\"Brazil\",\"value\":\"br\",\"description\":\"South America\"}]}\n      value=\"us\"\n      helperText=\"This affects your shipping options\"\n      required\n    >\n    </VgDropdown>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-dropdown\n      label=\"Country\"\n      placeholder=\"Select your country\"\n      options={[{\"label\":\"United States\",\"value\":\"us\",\"description\":\"North America\"},{\"label\":\"United Kingdom\",\"value\":\"uk\",\"description\":\"Europe\"},{\"label\":\"Canada\",\"value\":\"ca\",\"description\":\"North America\"},{\"label\":\"Australia\",\"value\":\"au\",\"description\":\"Oceania\"},{\"label\":\"Germany\",\"value\":\"de\",\"description\":\"Europe\"},{\"label\":\"Japan\",\"value\":\"jp\",\"description\":\"Asia\"},{\"label\":\"Brazil\",\"value\":\"br\",\"description\":\"South America\"}]}\n      value=\"us\"\n      helperText=\"This affects your shipping options\"\n      required\n      onvg-change={handleEvent}\n    >\n    </vg-dropdown>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst options = ref([{\"label\":\"United States\",\"value\":\"us\",\"description\":\"North America\"},{\"label\":\"United Kingdom\",\"value\":\"uk\",\"description\":\"Europe\"},{\"label\":\"Canada\",\"value\":\"ca\",\"description\":\"North America\"},{\"label\":\"Australia\",\"value\":\"au\",\"description\":\"Oceania\"},{\"label\":\"Germany\",\"value\":\"de\",\"description\":\"Europe\"},{\"label\":\"Japan\",\"value\":\"jp\",\"description\":\"Asia\"},{\"label\":\"Brazil\",\"value\":\"br\",\"description\":\"South America\"}])\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-dropdown\n    label=\"Country\"\n    placeholder=\"Select your country\"\n    :options=\"options\"\n    value=\"us\"\n    helperText=\"This affects your shipping options\"\n    required\n    @vg-change=\"handleEvent\"\n  >\n  </vg-dropdown>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public label = 'Country';\n  public placeholder = 'Select your country';\n  public options = [{\"label\":\"United States\",\"value\":\"us\",\"description\":\"North America\"},{\"label\":\"United Kingdom\",\"value\":\"uk\",\"description\":\"Europe\"},{\"label\":\"Canada\",\"value\":\"ca\",\"description\":\"North America\"},{\"label\":\"Australia\",\"value\":\"au\",\"description\":\"Oceania\"},{\"label\":\"Germany\",\"value\":\"de\",\"description\":\"Europe\"},{\"label\":\"Japan\",\"value\":\"jp\",\"description\":\"Asia\"},{\"label\":\"Brazil\",\"value\":\"br\",\"description\":\"South America\"}];\n  public value = 'us';\n  public helperText = 'This affects your shipping options';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-dropdown\n    [label]=\"label\"\n    [placeholder]=\"placeholder\"\n    [options]=\"options\"\n    [value]=\"value\"\n    [helperText]=\"helperText\"\n    [required]=\"true\"\n    (vg-change)=\"onEvent($event)\"\n>\n</vg-dropdown>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-dropdown\n        label=\"Country\"\n        placeholder=\"Select your country\"\n        .options=${[{\"label\":\"United States\",\"value\":\"us\",\"description\":\"North America\"},{\"label\":\"United Kingdom\",\"value\":\"uk\",\"description\":\"Europe\"},{\"label\":\"Canada\",\"value\":\"ca\",\"description\":\"North America\"},{\"label\":\"Australia\",\"value\":\"au\",\"description\":\"Oceania\"},{\"label\":\"Germany\",\"value\":\"de\",\"description\":\"Europe\"},{\"label\":\"Japan\",\"value\":\"jp\",\"description\":\"Asia\"},{\"label\":\"Brazil\",\"value\":\"br\",\"description\":\"South America\"}]}\n        value=\"us\"\n        helper-text=\"This affects your shipping options\"\n        ?required=${true}\n        @vg-change=${this.handleEvent}\n      >\n      </vg-dropdown>\n    `;\n  }\n}"
          },
          "args": {
            "label": "Country",
            "placeholder": "Select your country",
            "options": [
              {
                "label": "United States",
                "value": "us",
                "description": "North America"
              },
              {
                "label": "United Kingdom",
                "value": "uk",
                "description": "Europe"
              },
              {
                "label": "Canada",
                "value": "ca",
                "description": "North America"
              },
              {
                "label": "Australia",
                "value": "au",
                "description": "Oceania"
              },
              {
                "label": "Germany",
                "value": "de",
                "description": "Europe"
              },
              {
                "label": "Japan",
                "value": "jp",
                "description": "Asia"
              },
              {
                "label": "Brazil",
                "value": "br",
                "description": "South America"
              }
            ],
            "value": "us",
            "helperText": "This affects your shipping options",
            "disabled": false,
            "required": true
          }
        }
      ]
    },
    "vg-theme-provider": {
      "lit_component_tag": "vg-theme-provider",
      "category": "ThemeProvider",
      "descriptions": "",
      "component_hierarchy": "",
      "component_type": "",
      "props": {
        "mode": {
          "type": "ThemeMode",
          "enum": [
            "dark",
            "light",
            "glass",
            "cartoon"
          ],
          "description": "Theme mode that controls which token values are exposed.\nThe value is normalised to one of ThemeMode. Unsupported values fall back to \"dark\".",
          "default": "\"dark\""
        }
      },
      "events": {
        "vg-change": {
          "name": "vg-change",
          "event": "vg-change",
          "parameterType": "ThemeChangeDetail",
          "description": "Emitted whenever the active theme mode changes"
        }
      },
      "slots": {
        "default": {
          "description": "Components that should inherit the active theme and design tokens"
        }
      },
      "exposed": {},
      "examples": [
        {
          "id": "components-themeprovider--cartoon",
          "name": "Cartoon",
          "sources": {
            "html": "<vg-theme-provider\n  mode=\"cartoon\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"cartoon\" class=\"vg-theme-cartoon\" data-vg-theme=\"cartoon\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Cartoon Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the cartoon theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n      mode=\"cartoon\"\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"cartoon\" class=\"vg-theme-cartoon\" data-vg-theme=\"cartoon\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Cartoon Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the cartoon theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      mode=\"cartoon\"\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"cartoon\\\" class=\\\"vg-theme-cartoon\\\" data-vg-theme=\\\"cartoon\\\">\\n      <div style=\\\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\\\">\\n        <h3 style=\\\"margin: 0 0 16px 0; color: var(--vg-accent-color);\\\">Cartoon Theme</h3>\\n        <p style=\\\"margin: 0 0 16px 0;\\\">This content inherits the cartoon theme styling with CSS custom properties.</p>\\n        <vg-button variant=\\\"primary\\\">Sample Button</vg-button>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    mode=\"cartoon\"\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"cartoon\" class=\"vg-theme-cartoon\" data-vg-theme=\"cartoon\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Cartoon Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the cartoon theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public mode = 'cartoon';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    [mode]=\"mode\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"cartoon\" class=\"vg-theme-cartoon\" data-vg-theme=\"cartoon\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Cartoon Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the cartoon theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        mode=\"cartoon\"\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"cartoon\" class=\"vg-theme-cartoon\" data-vg-theme=\"cartoon\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Cartoon Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the cartoon theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {
            "mode": "cartoon"
          }
        },
        {
          "id": "components-themeprovider--dark",
          "name": "Dark",
          "sources": {
            "html": "<vg-theme-provider\n  mode=\"dark\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n      mode=\"dark\"\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      mode=\"dark\"\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"dark\\\" class=\\\"vg-theme-dark\\\" data-vg-theme=\\\"dark\\\">\\n      <div style=\\\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\\\">\\n        <h3 style=\\\"margin: 0 0 16px 0; color: var(--vg-accent-color);\\\">Dark Theme</h3>\\n        <p style=\\\"margin: 0 0 16px 0;\\\">This content inherits the dark theme styling with CSS custom properties.</p>\\n        <vg-button variant=\\\"primary\\\">Sample Button</vg-button>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    mode=\"dark\"\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public mode = 'dark';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    [mode]=\"mode\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        mode=\"dark\"\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {
            "mode": "dark"
          }
        },
        {
          "id": "components-themeprovider--default",
          "name": "Default",
          "sources": {
            "html": "<vg-theme-provider\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"dark\\\" class=\\\"vg-theme-dark\\\" data-vg-theme=\\\"dark\\\">\\n      <div style=\\\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\\\">\\n        <h3 style=\\\"margin: 0 0 16px 0; color: var(--vg-accent-color);\\\">Dark Theme</h3>\\n        <p style=\\\"margin: 0 0 16px 0;\\\">This content inherits the dark theme styling with CSS custom properties.</p>\\n        <vg-button variant=\\\"primary\\\">Sample Button</vg-button>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Dark Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the dark theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {}
        },
        {
          "id": "components-themeprovider--glass",
          "name": "Glass",
          "sources": {
            "html": "<vg-theme-provider\n  mode=\"glass\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"glass\" class=\"vg-theme-glass\" data-vg-theme=\"glass\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Glass Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the glass theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n      mode=\"glass\"\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"glass\" class=\"vg-theme-glass\" data-vg-theme=\"glass\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Glass Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the glass theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      mode=\"glass\"\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"glass\\\" class=\\\"vg-theme-glass\\\" data-vg-theme=\\\"glass\\\">\\n      <div style=\\\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\\\">\\n        <h3 style=\\\"margin: 0 0 16px 0; color: var(--vg-accent-color);\\\">Glass Theme</h3>\\n        <p style=\\\"margin: 0 0 16px 0;\\\">This content inherits the glass theme styling with CSS custom properties.</p>\\n        <vg-button variant=\\\"primary\\\">Sample Button</vg-button>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    mode=\"glass\"\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"glass\" class=\"vg-theme-glass\" data-vg-theme=\"glass\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Glass Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the glass theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public mode = 'glass';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    [mode]=\"mode\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"glass\" class=\"vg-theme-glass\" data-vg-theme=\"glass\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Glass Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the glass theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        mode=\"glass\"\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"glass\" class=\"vg-theme-glass\" data-vg-theme=\"glass\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Glass Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the glass theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {
            "mode": "glass"
          }
        },
        {
          "id": "components-themeprovider--light",
          "name": "Light",
          "sources": {
            "html": "<vg-theme-provider\n  mode=\"light\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"light\" class=\"vg-theme-light\" data-vg-theme=\"light\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Light Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the light theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n      mode=\"light\"\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"light\" class=\"vg-theme-light\" data-vg-theme=\"light\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Light Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the light theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      mode=\"light\"\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"light\\\" class=\\\"vg-theme-light\\\" data-vg-theme=\\\"light\\\">\\n      <div style=\\\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\\\">\\n        <h3 style=\\\"margin: 0 0 16px 0; color: var(--vg-accent-color);\\\">Light Theme</h3>\\n        <p style=\\\"margin: 0 0 16px 0;\\\">This content inherits the light theme styling with CSS custom properties.</p>\\n        <vg-button variant=\\\"primary\\\">Sample Button</vg-button>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    mode=\"light\"\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"light\" class=\"vg-theme-light\" data-vg-theme=\"light\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Light Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the light theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public mode = 'light';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    [mode]=\"mode\"\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"light\" class=\"vg-theme-light\" data-vg-theme=\"light\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Light Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the light theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        mode=\"light\"\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"light\" class=\"vg-theme-light\" data-vg-theme=\"light\">\n      <div style=\"padding: 24px; border-radius: 8px; background: var(--vg-background-color); color: var(--vg-text-color);\">\n        <h3 style=\"margin: 0 0 16px 0; color: var(--vg-accent-color);\">Light Theme</h3>\n        <p style=\"margin: 0 0 16px 0;\">This content inherits the light theme styling with CSS custom properties.</p>\n        <vg-button variant=\"primary\">Sample Button</vg-button>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {
            "mode": "light"
          }
        },
        {
          "id": "components-themeprovider--with-multiple-components",
          "name": "With Multiple Components",
          "sources": {
            "html": "<vg-theme-provider\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\">\n        <h3 style=\"margin: 0; color: var(--vg-accent-color);\">Component Showcase</h3>\n        \n        <vg-card heading=\"Sample Card\" variant=\"elevated\">\n          <p>This card inherits the theme from the provider.</p>\n          <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <vg-button variant=\"primary\" size=\"sm\">Primary</vg-button>\n            <vg-button variant=\"secondary\" size=\"sm\">Secondary</vg-button>\n            <vg-button variant=\"ghost\" size=\"sm\">Ghost</vg-button>\n          </div>\n        </vg-card>\n        \n        <div style=\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\">\n          <vg-input label=\"Username\" placeholder=\"Enter username\"></vg-input>\n          <vg-dropdown label=\"Options\" placeholder=\"Select...\"></vg-dropdown>\n        </div>\n      </div>\n</vg-theme-provider>\n\n<script>\n  const element = document.querySelector('vg-theme-provider');\n  \n  // Event listeners\n  element.addEventListener('vg-change', (event) => {\n    console.log('vg-change', event.detail);\n  });\n</script>",
            "react": "import { VgThemeProvider } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <VgThemeProvider\n    >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\">\n        <h3 style=\"margin: 0; color: var(--vg-accent-color);\">Component Showcase</h3>\n        \n        <vg-card heading=\"Sample Card\" variant=\"elevated\">\n          <p>This card inherits the theme from the provider.</p>\n          <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <vg-button variant=\"primary\" size=\"sm\">Primary</vg-button>\n            <vg-button variant=\"secondary\" size=\"sm\">Secondary</vg-button>\n            <vg-button variant=\"ghost\" size=\"sm\">Ghost</vg-button>\n          </div>\n        </vg-card>\n        \n        <div style=\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\">\n          <vg-input label=\"Username\" placeholder=\"Enter username\"></vg-input>\n          <vg-dropdown label=\"Options\" placeholder=\"Select...\"></vg-dropdown>\n        </div>\n      </div>\n    </VgThemeProvider>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-change', event.detail);\n  };\n\n  return (\n    <vg-theme-provider\n      onvg-change={handleEvent}\n    >\n    {\"<!--?lit$563119717$-->\\n    <vg-theme-provider mode=\\\"dark\\\" class=\\\"vg-theme-dark\\\" data-vg-theme=\\\"dark\\\">\\n      <div style=\\\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\\\">\\n        <h3 style=\\\"margin: 0; color: var(--vg-accent-color);\\\">Component Showcase</h3>\\n        \\n        <vg-card heading=\\\"Sample Card\\\" variant=\\\"elevated\\\">\\n          <p>This card inherits the theme from the provider.</p>\\n          <div style=\\\"display: flex; gap: 8px; margin-top: 16px;\\\">\\n            <vg-button variant=\\\"primary\\\" size=\\\"sm\\\">Primary</vg-button>\\n            <vg-button variant=\\\"secondary\\\" size=\\\"sm\\\">Secondary</vg-button>\\n            <vg-button variant=\\\"ghost\\\" size=\\\"sm\\\">Ghost</vg-button>\\n          </div>\\n        </vg-card>\\n        \\n        <div style=\\\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\\\">\\n          <vg-input label=\\\"Username\\\" placeholder=\\\"Enter username\\\"></vg-input>\\n          <vg-dropdown label=\\\"Options\\\" placeholder=\\\"Select...\\\"></vg-dropdown>\\n        </div>\\n      </div>\"}\n    </vg-theme-provider>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-theme-provider\n    @vg-change=\"handleEvent\"\n  >\n    <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\">\n        <h3 style=\"margin: 0; color: var(--vg-accent-color);\">Component Showcase</h3>\n        \n        <vg-card heading=\"Sample Card\" variant=\"elevated\">\n          <p>This card inherits the theme from the provider.</p>\n          <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <vg-button variant=\"primary\" size=\"sm\">Primary</vg-button>\n            <vg-button variant=\"secondary\" size=\"sm\">Secondary</vg-button>\n            <vg-button variant=\"ghost\" size=\"sm\">Ghost</vg-button>\n          </div>\n        </vg-card>\n        \n        <div style=\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\">\n          <vg-input label=\"Username\" placeholder=\"Enter username\"></vg-input>\n          <vg-dropdown label=\"Options\" placeholder=\"Select...\"></vg-dropdown>\n        </div>\n      </div>\n  </vg-theme-provider>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-theme-provider\n    (vg-change)=\"onEvent($event)\"\n>\n  <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\">\n        <h3 style=\"margin: 0; color: var(--vg-accent-color);\">Component Showcase</h3>\n        \n        <vg-card heading=\"Sample Card\" variant=\"elevated\">\n          <p>This card inherits the theme from the provider.</p>\n          <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <vg-button variant=\"primary\" size=\"sm\">Primary</vg-button>\n            <vg-button variant=\"secondary\" size=\"sm\">Secondary</vg-button>\n            <vg-button variant=\"ghost\" size=\"sm\">Ghost</vg-button>\n          </div>\n        </vg-card>\n        \n        <div style=\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\">\n          <vg-input label=\"Username\" placeholder=\"Enter username\"></vg-input>\n          <vg-dropdown label=\"Options\" placeholder=\"Select...\"></vg-dropdown>\n        </div>\n      </div>\n</vg-theme-provider>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-theme-provider\n        @vg-change=${this.handleEvent}\n      >\n        <!--?lit$563119717$-->\n    <vg-theme-provider mode=\"dark\" class=\"vg-theme-dark\" data-vg-theme=\"dark\">\n      <div style=\"padding: 24px; display: flex; flex-direction: column; gap: 16px; background: var(--vg-background-color); color: var(--vg-text-color); border-radius: 8px;\">\n        <h3 style=\"margin: 0; color: var(--vg-accent-color);\">Component Showcase</h3>\n        \n        <vg-card heading=\"Sample Card\" variant=\"elevated\">\n          <p>This card inherits the theme from the provider.</p>\n          <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <vg-button variant=\"primary\" size=\"sm\">Primary</vg-button>\n            <vg-button variant=\"secondary\" size=\"sm\">Secondary</vg-button>\n            <vg-button variant=\"ghost\" size=\"sm\">Ghost</vg-button>\n          </div>\n        </vg-card>\n        \n        <div style=\"display: grid; gap: 16px; grid-template-columns: 1fr 1fr;\">\n          <vg-input label=\"Username\" placeholder=\"Enter username\"></vg-input>\n          <vg-dropdown label=\"Options\" placeholder=\"Select...\"></vg-dropdown>\n        </div>\n      </div>\n      </vg-theme-provider>\n    `;\n  }\n}"
          },
          "args": {}
        }
      ]
    },
    "vg-card": {
      "lit_component_tag": "vg-card",
      "category": "Card",
      "descriptions": "",
      "component_hierarchy": "",
      "component_type": "",
      "props": {
        "variant": {
          "type": "CardVariant",
          "enum": [
            "elevated",
            "outlined",
            "subtle"
          ],
          "description": "Visual variant for the card container.",
          "default": "\"elevated\""
        },
        "heading": {
          "type": "string | null",
          "enum": [
            "trin",
            "ul"
          ],
          "description": "Display heading rendered above the default slot when provided.",
          "default": "null"
        },
        "interactive": {
          "type": "boolean",
          "description": "Enables hover/press affordances and makes the card keyboard activatable.",
          "default": "false"
        }
      },
      "events": {
        "vg-action": {
          "name": "vg-action",
          "event": "vg-action",
          "parameterType": "CardActionDetail",
          "description": "Fired when an interactive card is triggered"
        }
      },
      "slots": {
        "header": {
          "description": "Optional content rendered before the body, often containing a title or metadata"
        },
        "default": {
          "description": "Main card body content"
        },
        "footer": {
          "description": "Optional actions or supporting content rendered after the body"
        }
      },
      "exposed": {},
      "examples": [
        {
          "id": "components-card--elevated",
          "name": "Elevated",
          "sources": {
            "html": "<vg-card\n  variant=\"elevated\"\n  heading=\"Card Heading\"\n>\n  <!--?lit$952052661$-->\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"elevated\"\n      heading=\"Card Heading\"\n    >\n    <!--?lit$952052661$-->\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"elevated\"\n      heading=\"Card Heading\"\n      onvg-action={handleEvent}\n    >\n    {\"<!--?lit$952052661$-->\\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"elevated\"\n    heading=\"Card Heading\"\n    @vg-action=\"handleEvent\"\n  >\n    <!--?lit$952052661$-->\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'elevated';\n  public heading = 'Card Heading';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [heading]=\"heading\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <!--?lit$952052661$-->\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"elevated\"\n        heading=\"Card Heading\"\n        @vg-action=${this.handleEvent}\n      >\n        <!--?lit$952052661$-->\n    <p>This is the main content of the card. It can contain any HTML content including text, images, and other elements.</p>\n    <p>Cards are useful for grouping related information together in a visually appealing container.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "elevated",
            "heading": "Card Heading"
          }
        },
        {
          "id": "components-card--fully-customized",
          "name": "Fully Customized",
          "sources": {
            "html": "<vg-card\n  variant=\"outlined\"\n  interactive\n>\n    <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n  <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n  <!--?lit$952052661$-->\n    \n    <div style=\"padding: 16px;\">\n      <img src=\"https://via.placeholder.com/200x120\" alt=\"Product\" style=\"width: 100%; border-radius: 4px; margin-bottom: 12px;\">\n      <h4 style=\"margin: 0 0 8px 0;\">Amazing Product</h4>\n      <p style=\"margin: 0; color: #666;\">This is a featured product with custom header and footer styling.</p>\n      <div style=\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\">$99.99</div>\n    </div>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"outlined\"\n      interactive\n    >\n    <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n    <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n    <!--?lit$952052661$-->\n    \n    <div style=\"padding: 16px;\">\n      <img src=\"https://via.placeholder.com/200x120\" alt=\"Product\" style=\"width: 100%; border-radius: 4px; margin-bottom: 12px;\">\n      <h4 style=\"margin: 0 0 8px 0;\">Amazing Product</h4>\n      <p style=\"margin: 0; color: #666;\">This is a featured product with custom header and footer styling.</p>\n      <div style=\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\">$99.99</div>\n    </div>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"outlined\"\n      interactive\n      onvg-action={handleEvent}\n    >\n    <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n    <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n    {\"<!--?lit$952052661$-->\\n    \\n    <div style=\\\"padding: 16px;\\\">\\n      <img src=\\\"https://via.placeholder.com/200x120\\\" alt=\\\"Product\\\" style=\\\"width: 100%; border-radius: 4px; margin-bottom: 12px;\\\">\\n      <h4 style=\\\"margin: 0 0 8px 0;\\\">Amazing Product</h4>\\n      <p style=\\\"margin: 0; color: #666;\\\">This is a featured product with custom header and footer styling.</p>\\n      <div style=\\\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\\\">$99.99</div>\\n    </div>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"outlined\"\n    interactive\n    @vg-action=\"handleEvent\"\n  >\n    <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n    <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n    <!--?lit$952052661$-->\n    \n    <div style=\"padding: 16px;\">\n      <img src=\"https://via.placeholder.com/200x120\" alt=\"Product\" style=\"width: 100%; border-radius: 4px; margin-bottom: 12px;\">\n      <h4 style=\"margin: 0 0 8px 0;\">Amazing Product</h4>\n      <p style=\"margin: 0; color: #666;\">This is a featured product with custom header and footer styling.</p>\n      <div style=\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\">$99.99</div>\n    </div>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'outlined';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [interactive]=\"true\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n  <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n  <!--?lit$952052661$-->\n    \n    <div style=\"padding: 16px;\">\n      <img src=\"https://via.placeholder.com/200x120\" alt=\"Product\" style=\"width: 100%; border-radius: 4px; margin-bottom: 12px;\">\n      <h4 style=\"margin: 0 0 8px 0;\">Amazing Product</h4>\n      <p style=\"margin: 0; color: #666;\">This is a featured product with custom header and footer styling.</p>\n      <div style=\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\">$99.99</div>\n    </div>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"outlined\"\n        ?interactive=${true}\n        @vg-action=${this.handleEvent}\n      >\n        <div slot=\"header\" style=\"padding: 16px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;\">\n      <h3 style=\"margin: 0;\">Featured Product</h3>\n    </div>\n        <div slot=\"footer\" style=\"padding: 16px; background: #f8f9fa; display: flex; justify-content: space-between; align-items: center;\">\n      <span style=\"color: #28a745; font-size: 14px;\">✓ In Stock</span>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Add to Cart</button>\n    </div>\n        <!--?lit$952052661$-->\n    \n    <div style=\"padding: 16px;\">\n      <img src=\"https://via.placeholder.com/200x120\" alt=\"Product\" style=\"width: 100%; border-radius: 4px; margin-bottom: 12px;\">\n      <h4 style=\"margin: 0 0 8px 0;\">Amazing Product</h4>\n      <p style=\"margin: 0; color: #666;\">This is a featured product with custom header and footer styling.</p>\n      <div style=\"margin-top: 12px; font-size: 18px; font-weight: bold; color: #007bff;\">$99.99</div>\n    </div>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "outlined",
            "interactive": true
          }
        },
        {
          "id": "components-card--interactive",
          "name": "Interactive",
          "sources": {
            "html": "<vg-card\n  variant=\"elevated\"\n  heading=\"Interactive Card\"\n  interactive\n>\n  <!--?lit$952052661$-->\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\n    <p>Try clicking or pressing Enter/Space when focused.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"elevated\"\n      heading=\"Interactive Card\"\n      interactive\n    >\n    <!--?lit$952052661$-->\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\n    <p>Try clicking or pressing Enter/Space when focused.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"elevated\"\n      heading=\"Interactive Card\"\n      interactive\n      onvg-action={handleEvent}\n    >\n    {\"<!--?lit$952052661$-->\\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\\n    <p>Try clicking or pressing Enter/Space when focused.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"elevated\"\n    heading=\"Interactive Card\"\n    interactive\n    @vg-action=\"handleEvent\"\n  >\n    <!--?lit$952052661$-->\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\n    <p>Try clicking or pressing Enter/Space when focused.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'elevated';\n  public heading = 'Interactive Card';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [heading]=\"heading\"\n    [interactive]=\"true\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <!--?lit$952052661$-->\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\n    <p>Try clicking or pressing Enter/Space when focused.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"elevated\"\n        heading=\"Interactive Card\"\n        ?interactive=${true}\n        @vg-action=${this.handleEvent}\n      >\n        <!--?lit$952052661$-->\n    <p>This card is interactive and can be clicked. It will emit a vg-action event when activated.</p>\n    <p>Try clicking or pressing Enter/Space when focused.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "elevated",
            "heading": "Interactive Card",
            "interactive": true
          }
        },
        {
          "id": "components-card--outlined",
          "name": "Outlined",
          "sources": {
            "html": "<vg-card\n  variant=\"outlined\"\n  heading=\"Outlined Card\"\n>\n  <!--?lit$952052661$-->\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"outlined\"\n      heading=\"Outlined Card\"\n    >\n    <!--?lit$952052661$-->\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"outlined\"\n      heading=\"Outlined Card\"\n      onvg-action={handleEvent}\n    >\n    {\"<!--?lit$952052661$-->\\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"outlined\"\n    heading=\"Outlined Card\"\n    @vg-action=\"handleEvent\"\n  >\n    <!--?lit$952052661$-->\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'outlined';\n  public heading = 'Outlined Card';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [heading]=\"heading\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <!--?lit$952052661$-->\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"outlined\"\n        heading=\"Outlined Card\"\n        @vg-action=${this.handleEvent}\n      >\n        <!--?lit$952052661$-->\n    <p>This card uses the outlined variant, which typically shows a border instead of a shadow.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "outlined",
            "heading": "Outlined Card"
          }
        },
        {
          "id": "components-card--subtle",
          "name": "Subtle",
          "sources": {
            "html": "<vg-card\n  variant=\"subtle\"\n  heading=\"Subtle Card\"\n>\n  <!--?lit$952052661$-->\n    <p>This card uses the subtle variant for a more understated appearance.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"subtle\"\n      heading=\"Subtle Card\"\n    >\n    <!--?lit$952052661$-->\n    <p>This card uses the subtle variant for a more understated appearance.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"subtle\"\n      heading=\"Subtle Card\"\n      onvg-action={handleEvent}\n    >\n    {\"<!--?lit$952052661$-->\\n    <p>This card uses the subtle variant for a more understated appearance.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"subtle\"\n    heading=\"Subtle Card\"\n    @vg-action=\"handleEvent\"\n  >\n    <!--?lit$952052661$-->\n    <p>This card uses the subtle variant for a more understated appearance.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'subtle';\n  public heading = 'Subtle Card';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [heading]=\"heading\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <!--?lit$952052661$-->\n    <p>This card uses the subtle variant for a more understated appearance.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"subtle\"\n        heading=\"Subtle Card\"\n        @vg-action=${this.handleEvent}\n      >\n        <!--?lit$952052661$-->\n    <p>This card uses the subtle variant for a more understated appearance.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "subtle",
            "heading": "Subtle Card"
          }
        },
        {
          "id": "components-card--with-footer-slot",
          "name": "With Footer Slot",
          "sources": {
            "html": "<vg-card\n  variant=\"elevated\"\n  heading=\"Card with Actions\"\n>\n    <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n  <!--?lit$952052661$-->\n    <p>This card has action buttons in the footer slot.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"elevated\"\n      heading=\"Card with Actions\"\n    >\n    <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n    <!--?lit$952052661$-->\n    <p>This card has action buttons in the footer slot.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"elevated\"\n      heading=\"Card with Actions\"\n      onvg-action={handleEvent}\n    >\n    <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n    {\"<!--?lit$952052661$-->\\n    <p>This card has action buttons in the footer slot.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"elevated\"\n    heading=\"Card with Actions\"\n    @vg-action=\"handleEvent\"\n  >\n    <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n    <!--?lit$952052661$-->\n    <p>This card has action buttons in the footer slot.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'elevated';\n  public heading = 'Card with Actions';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    [heading]=\"heading\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n  <!--?lit$952052661$-->\n    <p>This card has action buttons in the footer slot.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"elevated\"\n        heading=\"Card with Actions\"\n        @vg-action=${this.handleEvent}\n      >\n        <div slot=\"footer\" style=\"display: flex; gap: 8px; padding: 16px; justify-content: flex-end; border-top: 1px solid #e0e0e0;\">\n      <button style=\"padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px;\">Cancel</button>\n      <button style=\"padding: 8px 16px; border: none; background: #007bff; color: white; border-radius: 4px;\">Save</button>\n    </div>\n        <!--?lit$952052661$-->\n    <p>This card has action buttons in the footer slot.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "elevated",
            "interactive": false,
            "heading": "Card with Actions"
          }
        },
        {
          "id": "components-card--with-header-slot",
          "name": "With Header Slot",
          "sources": {
            "html": "<vg-card\n  variant=\"elevated\"\n>\n    <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n  <!--?lit$952052661$-->\n    \n    </div>\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\n</vg-card>\n\n<script>\n  const element = document.querySelector('vg-card');\n  \n  // Event listeners\n  element.addEventListener('vg-action', (event) => {\n    console.log('vg-action', event.detail);\n  });\n</script>",
            "react": "import { VgCard } from 'vg/react'\nimport 'vg'\n\nfunction MyComponent() {\n  const handleEvent = (event) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <VgCard\n      variant=\"elevated\"\n    >\n    <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n    <!--?lit$952052661$-->\n    \n    </div>\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\n    </VgCard>\n  );\n}",
            "react19": "import 'vg/jsx'\nimport 'vg/index.css'\n\nfunction MyComponent() {\n  const handleEvent = (event: CustomEvent) => {\n    console.log('vg-action', event.detail);\n  };\n\n  return (\n    <vg-card\n      variant=\"elevated\"\n      onvg-action={handleEvent}\n    >\n    <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n    {\"<!--?lit$952052661$-->\\n    \\n    </div>\\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\"}\n    </vg-card>\n  );\n}",
            "vue": "<script setup>\nimport 'vg/vue'\nimport { ref } from 'vue'\n\nconst handleEvent = (event) => {\n  console.log(event.type, event.detail);\n}\n</script>\n\n<template>\n  <vg-card\n    variant=\"elevated\"\n    @vg-action=\"handleEvent\"\n  >\n    <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n    <!--?lit$952052661$-->\n    \n    </div>\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\n  </vg-card>\n</template>",
            "angular": "// component.ts\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  standalone: true,\n  templateUrl: './demo.component.html',\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DemoComponent {\n  public variant = 'elevated';\n\n  onEvent(event: Event) {\n    console.log((event as CustomEvent).detail);\n  }\n}\n\n// demo.component.html\n<vg-card\n    [variant]=\"variant\"\n    (vg-action)=\"onEvent($event)\"\n>\n  <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n  <!--?lit$952052661$-->\n    \n    </div>\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\n</vg-card>",
            "lit": "import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('my-demo')\nexport class MyDemo extends LitElement {\n\n  handleEvent(e: CustomEvent) {\n    console.log(e.type, e.detail);\n  }\n\n  render() {\n    return html`\n      <vg-card\n        variant=\"elevated\"\n        @vg-action=${this.handleEvent}\n      >\n        <div slot=\"header\" style=\"display: flex; align-items: center; gap: 8px; padding: 16px; border-bottom: 1px solid #e0e0e0;\">\n      <img src=\"https://via.placeholder.com/40\" alt=\"Avatar\" style=\"border-radius: 50%;\">\n      <div>\n        <h4 style=\"margin: 0; font-size: 14px;\">John Doe</h4>\n        <p style=\"margin: 0; font-size: 12px; color: #666;\">2 hours ago</p>\n      </div>\n        <!--?lit$952052661$-->\n    \n    </div>\n    <p>This card demonstrates using the header slot for custom content like user information.</p>\n      </vg-card>\n    `;\n  }\n}"
          },
          "args": {
            "variant": "elevated",
            "interactive": false
          }
        }
      ]
    }
  },
  "categories": {
    "Input": {
      "name": "Input",
      "components": [
        "vg-input"
      ]
    },
    "Button": {
      "name": "Button",
      "components": [
        "vg-button"
      ]
    },
    "Dropdown": {
      "name": "Dropdown",
      "components": [
        "vg-dropdown"
      ]
    },
    "ThemeProvider": {
      "name": "ThemeProvider",
      "components": [
        "vg-theme-provider"
      ]
    },
    "Card": {
      "name": "Card",
      "components": [
        "vg-card"
      ]
    }
  },
  "predefined_css_definitions": "@import'../src/index.css';:root{font-family:var(--vg-font-family-base);--vg-font-family-base:'Inter', 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;--vg-font-size-xs:0.75rem;--vg-font-size-sm:0.875rem;--vg-font-size-md:1rem;--vg-font-size-lg:1.125rem;--vg-font-size-xl:1.25rem;--vg-font-size-2xl:1.5rem;--vg-line-height-tight:1.25;--vg-line-height-normal:1.5;--vg-line-height-relaxed:1.75;--vg-spacing-2xs:0.25rem;--vg-spacing-xs:0.5rem;--vg-spacing-sm:0.75rem;--vg-spacing-md:1rem;--vg-spacing-lg:1.5rem;--vg-spacing-xl:2rem;--vg-radius-xs:0.25rem;--vg-radius-sm:0.375rem;--vg-radius-md:0.5rem;--vg-radius-lg:0.75rem;--vg-border-width-thin:1px;--vg-border-width-regular:1.5px;--vg-border-width-thick:2px;--vg-shadow-soft:0 10px 30px var(--vg-shadow-color);--vg-shadow-strong:0 20px 45px var(--vg-shadow-color);--vg-transition-fast:120ms;--vg-transition-base:220ms;--vg-transition-slow:360ms;color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#f8fafc;--vg-text-color-disabled:rgba(248, 250, 252, 0.45);--vg-text-color-primary:#38bdf8;--vg-text-color-secondary:#94a3b8;--vg-text-color-tertiary:#64748b;--vg-background-color:#020617;--vg-background-color-primary:#0f172a;--vg-background-color-secondary:#1e293b;--vg-background-color-tertiary:#334155;--vg-border-color:rgba(148, 163, 184, 0.4);--vg-shadow-color:rgba(15, 23, 42, 0.6);--vg-accent-color:#22d3ee}[data-vg-theme],.vg-theme-provider{font-family:var(--vg-font-family-base);--vg-font-family-base:'Inter', 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;--vg-font-size-xs:0.75rem;--vg-font-size-sm:0.875rem;--vg-font-size-md:1rem;--vg-font-size-lg:1.125rem;--vg-font-size-xl:1.25rem;--vg-font-size-2xl:1.5rem;--vg-line-height-tight:1.25;--vg-line-height-normal:1.5;--vg-line-height-relaxed:1.75;--vg-spacing-2xs:0.25rem;--vg-spacing-xs:0.5rem;--vg-spacing-sm:0.75rem;--vg-spacing-md:1rem;--vg-spacing-lg:1.5rem;--vg-spacing-xl:2rem;--vg-radius-xs:0.25rem;--vg-radius-sm:0.375rem;--vg-radius-md:0.5rem;--vg-radius-lg:0.75rem;--vg-border-width-thin:1px;--vg-border-width-regular:1.5px;--vg-border-width-thick:2px;--vg-shadow-soft:0 10px 30px var(--vg-shadow-color);--vg-shadow-strong:0 20px 45px var(--vg-shadow-color);--vg-transition-fast:120ms;--vg-transition-base:220ms;--vg-transition-slow:360ms}.vg-theme-dark,[data-vg-theme=dark]{color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#f8fafc;--vg-text-color-disabled:rgba(248, 250, 252, 0.45);--vg-text-color-primary:#38bdf8;--vg-text-color-secondary:#94a3b8;--vg-text-color-tertiary:#64748b;--vg-background-color:#020617;--vg-background-color-primary:#0f172a;--vg-background-color-secondary:#1e293b;--vg-background-color-tertiary:#334155;--vg-border-color:rgba(148, 163, 184, 0.4);--vg-shadow-color:rgba(15, 23, 42, 0.6);--vg-accent-color:#22d3ee}.vg-theme-light,[data-vg-theme=light]{color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#0f172a;--vg-text-color-disabled:rgba(15, 23, 42, 0.38);--vg-text-color-primary:#2563eb;--vg-text-color-secondary:#475569;--vg-text-color-tertiary:#64748b;--vg-background-color:#ffffff;--vg-background-color-primary:#f8fafc;--vg-background-color-secondary:#e2e8f0;--vg-background-color-tertiary:#cbd5f5;--vg-border-color:rgba(15, 23, 42, 0.18);--vg-shadow-color:rgba(15, 23, 42, 0.18);--vg-accent-color:#7c3aed}.vg-theme-glass,[data-vg-theme=glass]{color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:rgba(255, 255, 255, 0.88);--vg-text-color-disabled:rgba(255, 255, 255, 0.55);--vg-text-color-primary:#60a5fa;--vg-text-color-secondary:rgba(226, 232, 240, 0.85);--vg-text-color-tertiary:rgba(148, 163, 184, 0.75);--vg-background-color:rgba(15, 23, 42, 0.35);--vg-background-color-primary:rgba(15, 23, 42, 0.65);--vg-background-color-secondary:rgba(30, 41, 59, 0.48);--vg-background-color-tertiary:rgba(100, 116, 139, 0.3);--vg-border-color:rgba(148, 163, 184, 0.35);--vg-shadow-color:rgba(15, 23, 42, 0.45);--vg-accent-color:rgba(94, 234, 212, 0.85)}.vg-theme-cartoon,[data-vg-theme=cartoon]{color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#1f0a2a;--vg-text-color-disabled:rgba(31, 10, 42, 0.45);--vg-text-color-primary:#9a3412;--vg-text-color-secondary:#92400e;--vg-text-color-tertiary:#134e4a;--vg-background-color:#fefae0;--vg-background-color-primary:#ffd166;--vg-background-color-secondary:#fcbf49;--vg-background-color-tertiary:#e09f3e;--vg-border-color:rgba(31, 10, 42, 0.35);--vg-shadow-color:rgba(31, 10, 42, 0.35);--vg-accent-color:#2563eb}.vg-theme-glass,[data-vg-theme=glass]{backdrop-filter:blur(20px) saturate(130%)}.vg-theme-cartoon,[data-vg-theme=cartoon]{letter-spacing:.02em}[class*=vg-theme-] *,[data-vg-theme] *{transition:color var(--vg-transition-base) ease,background-color var(--vg-transition-slow) ease}:host{display:contents;font-family:var(--vg-font-family-base);--vg-font-family-base:'Inter', 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;--vg-font-size-xs:0.75rem;--vg-font-size-sm:0.875rem;--vg-font-size-md:1rem;--vg-font-size-lg:1.125rem;--vg-font-size-xl:1.25rem;--vg-font-size-2xl:1.5rem;--vg-line-height-tight:1.25;--vg-line-height-normal:1.5;--vg-line-height-relaxed:1.75;--vg-spacing-2xs:0.25rem;--vg-spacing-xs:0.5rem;--vg-spacing-sm:0.75rem;--vg-spacing-md:1rem;--vg-spacing-lg:1.5rem;--vg-spacing-xl:2rem;--vg-radius-xs:0.25rem;--vg-radius-sm:0.375rem;--vg-radius-md:0.5rem;--vg-radius-lg:0.75rem;--vg-border-width-thin:1px;--vg-border-width-regular:1.5px;--vg-border-width-thick:2px;--vg-shadow-soft:0 10px 30px var(--vg-shadow-color);--vg-shadow-strong:0 20px 45px var(--vg-shadow-color);--vg-transition-fast:120ms;--vg-transition-base:220ms;--vg-transition-slow:360ms}:host(.vg-theme-dark){color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#f8fafc;--vg-text-color-disabled:rgba(248, 250, 252, 0.45);--vg-text-color-primary:#38bdf8;--vg-text-color-secondary:#94a3b8;--vg-text-color-tertiary:#64748b;--vg-background-color:#020617;--vg-background-color-primary:#0f172a;--vg-background-color-secondary:#1e293b;--vg-background-color-tertiary:#334155;--vg-border-color:rgba(148, 163, 184, 0.4);--vg-shadow-color:rgba(15, 23, 42, 0.6);--vg-accent-color:#22d3ee}:host(.vg-theme-dark) ::slotted(*){color:inherit}:host(.vg-theme-dark) ::slotted(a){color:var(--vg-text-color-primary)}:host(.vg-theme-light){color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#0f172a;--vg-text-color-disabled:rgba(15, 23, 42, 0.38);--vg-text-color-primary:#2563eb;--vg-text-color-secondary:#475569;--vg-text-color-tertiary:#64748b;--vg-background-color:#ffffff;--vg-background-color-primary:#f8fafc;--vg-background-color-secondary:#e2e8f0;--vg-background-color-tertiary:#cbd5f5;--vg-border-color:rgba(15, 23, 42, 0.18);--vg-shadow-color:rgba(15, 23, 42, 0.18);--vg-accent-color:#7c3aed}:host(.vg-theme-light) ::slotted(*){color:inherit}:host(.vg-theme-light) ::slotted(a){color:var(--vg-text-color-primary)}:host(.vg-theme-glass){color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:rgba(255, 255, 255, 0.88);--vg-text-color-disabled:rgba(255, 255, 255, 0.55);--vg-text-color-primary:#60a5fa;--vg-text-color-secondary:rgba(226, 232, 240, 0.85);--vg-text-color-tertiary:rgba(148, 163, 184, 0.75);--vg-background-color:rgba(15, 23, 42, 0.35);--vg-background-color-primary:rgba(15, 23, 42, 0.65);--vg-background-color-secondary:rgba(30, 41, 59, 0.48);--vg-background-color-tertiary:rgba(100, 116, 139, 0.3);--vg-border-color:rgba(148, 163, 184, 0.35);--vg-shadow-color:rgba(15, 23, 42, 0.45);--vg-accent-color:rgba(94, 234, 212, 0.85)}:host(.vg-theme-glass) ::slotted(*){color:inherit}:host(.vg-theme-glass) ::slotted(a){color:var(--vg-text-color-primary)}:host(.vg-theme-cartoon){color:var(--vg-text-color);background-color:var(--vg-background-color);--vg-text-color:#1f0a2a;--vg-text-color-disabled:rgba(31, 10, 42, 0.45);--vg-text-color-primary:#9a3412;--vg-text-color-secondary:#92400e;--vg-text-color-tertiary:#134e4a;--vg-background-color:#fefae0;--vg-background-color-primary:#ffd166;--vg-background-color-secondary:#fcbf49;--vg-background-color-tertiary:#e09f3e;--vg-border-color:rgba(31, 10, 42, 0.35);--vg-shadow-color:rgba(31, 10, 42, 0.35);--vg-accent-color:#2563eb}:host(.vg-theme-cartoon) ::slotted(*){color:inherit}:host(.vg-theme-cartoon) ::slotted(a){color:var(--vg-text-color-primary)}:host(.vg-theme-glass){backdrop-filter:blur(20px) saturate(130%)}:host(.vg-theme-cartoon){letter-spacing:.02em}::slotted(*){transition:color var(--vg-transition-base) ease,background-color var(--vg-transition-slow) ease}:root{--vg-doc-extraction: true}"
}